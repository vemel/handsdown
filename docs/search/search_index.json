{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Handsdown API Index","text":"<p>Auto-generated documentation index.</p> <p>A full list of Handsdown project modules.</p> <p>To add custom content to this file, create <code>HANDSDOWN.md</code> in your project root.</p> <ul> <li>Examples<ul> <li>PEP 484 - comment-based type annotations examples</li> <li>Supported expressions examples</li> <li>Google docstrings examples</li> <li>Main Example</li> <li>PEP 257 - PEP 257 and Google docstrings examples</li> <li>Stub file type annotations examples</li> <li>PEP 287 - reStructuredText docstrings examples</li> <li>Sphinx docstrings examples</li> <li>PEP 484 - type annotations examples</li> </ul> </li> <li>Handsdown<ul> <li>Module</li> <li>AST Parser<ul> <li>Analyzers<ul> <li>BaseAnalyzer</li> <li>ClassAnalyzer</li> <li>ExpressionAnalyzer</li> <li>FunctionAnalyzer</li> <li>ModuleAnalyzer</li> </ul> </li> <li>ModuleRecordList</li> <li>Node Records<ul> <li>ArgumentRecord</li> <li>AttributeRecord</li> <li>ClassRecord</li> <li>ExpressionRecord</li> <li>FunctionRecord</li> <li>ImportRecord</li> <li>ModuleRecord</li> <li>NodeRecord</li> <li>TextRecord</li> </ul> </li> <li>Smart Ast</li> <li>Type Defs</li> </ul> </li> <li>Cli Parser</li> <li>Constants</li> <li>Exceptions</li> <li>Generators<ul> <li>Base</li> <li>Material</li> <li>Rtd</li> </ul> </li> <li>JinjaManager</li> <li>Loader</li> <li>Main</li> <li>MDDocument</li> <li>Processors<ul> <li>Base Docstring Processor</li> <li>PEP 257 Docstring Processor</li> <li>reStructuredText Docstring Processor</li> <li>Section</li> <li>SectionBlock</li> <li>SectionMap</li> <li>Smart</li> </ul> </li> <li>Utils<ul> <li>Blackify</li> <li>DocstringFormatter</li> <li>ImportString</li> <li>IndentTrimmer</li> <li>Logger</li> <li>Markdown</li> <li>Path</li> <li>PathFinder</li> <li>Strings</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>Examples of different docstring formats supported by <code>handsdown</code>. Can be used as a list of supported features.</p> <p>Handsdown API Index / Examples</p> <p>Auto-generated documentation for examples module.</p>"},{"location":"examples/#modules","title":"Modules","text":"<ul> <li>PEP 484 - comment-based type annotations examples</li> <li>Supported expressions examples</li> <li>Google docstrings examples</li> <li>Main Example</li> <li>PEP 257 - PEP 257 and Google docstrings examples</li> <li>Stub file type annotations examples</li> <li>PEP 287 - reStructuredText docstrings examples</li> <li>Sphinx docstrings examples</li> <li>PEP 484 - type annotations examples</li> </ul>"},{"location":"examples/comment_typed/","title":"PEP 484 - comment-based type annotations examples","text":""},{"location":"examples/comment_typed/#links","title":"Links","text":"<p>PEP 484 - Type Hints</p> <p>Handsdown API Index / Examples / PEP 484 - comment-based type annotations examples</p> <p>Auto-generated documentation for examples.comment_typed module.</p>"},{"location":"examples/comment_typed/#myvalue","title":"MyValue","text":"<p>Show source in comment_typed.py:11</p>"},{"location":"examples/comment_typed/#signature","title":"Signature","text":"<pre><code>class MyValue:\n    def __init__(self, *args, **kwargs) -&gt; None:\n        ...\n</code></pre>"},{"location":"examples/comment_typed/#typed","title":"Typed","text":"<p>Show source in comment_typed.py:17</p>"},{"location":"examples/comment_typed/#attributes","title":"Attributes","text":"<ul> <li><code>two</code> - comment here: 2</li> </ul>"},{"location":"examples/comment_typed/#signature_1","title":"Signature","text":"<pre><code>class Typed:\n    def __init__(\n        self,\n        my_bool: bool = one &amp; ~two == \"three\" and not -4,\n        my_lambda=lambda x, y, *args, **kwargs,: x + y,\n        my_set: Set = {1, 2, [3, 4], {5: 6}, (7, 8)},\n        _value: Union[List[str], str, MyValue] = MyValue(\n            \"asd\", *args, kwarg=123, **extras\n        ),\n        _name: str = \"default\",\n    ) -&gt; None:\n        ...\n</code></pre>"},{"location":"examples/comment_typed/#see-also","title":"See also","text":"<ul> <li>MyValue</li> </ul>"},{"location":"examples/comment_typed/#typedclassmethod","title":"Typed.classmethod","text":"<p>Show source in comment_typed.py:36</p>"},{"location":"examples/comment_typed/#signature_2","title":"Signature","text":"<pre><code>@classmethod\ndef classmethod(cls, _my_value: MyValue, *_args: str, **_kwargs: Any) -&gt; Typed:\n    ...\n</code></pre>"},{"location":"examples/comment_typed/#see-also_1","title":"See also","text":"<ul> <li>MyValue</li> </ul>"},{"location":"examples/comment_typed/#func","title":"func","text":"<p>Show source in comment_typed.py:42</p>"},{"location":"examples/comment_typed/#signature_3","title":"Signature","text":"<pre><code>def func(\n    _list: Tuple[List[str], ...], _my_value_cls: Type[MyValue] = MyValue, **_kwargs: None\n) -&gt; Any:\n    ...\n</code></pre>"},{"location":"examples/comment_typed/#see-also_2","title":"See also","text":"<ul> <li>MyValue</li> </ul>"},{"location":"examples/comment_typed/#func_any","title":"func_any","text":"<p>Show source in comment_typed.py:47</p>"},{"location":"examples/comment_typed/#signature_4","title":"Signature","text":"<pre><code>def func_any(\n    _list: Tuple[List[str], ...], _my_value_cls: Any = MyValue, **_kwargs: None\n) -&gt; Any:\n    ...\n</code></pre>"},{"location":"examples/comment_typed/#see-also_3","title":"See also","text":"<ul> <li>MyValue</li> </ul>"},{"location":"examples/expressions/","title":"Supported expressions examples","text":"<p>Test for <code>handsdown.ast_parser.analyzers.expression_analyzer.ExpressionAnalyzer</code> test.</p> <p>Handsdown API Index / Examples / Supported expressions examples</p> <p>Auto-generated documentation for examples.expressions module.</p>"},{"location":"examples/expressions/#attributes","title":"Attributes","text":"<ul> <li> <p><code>STRING</code> - string example: 'string'</p> </li> <li> <p><code>BSTRING</code> - bytes example: b'string'</p> </li> <li> <p><code>RSTRING</code> - r-string example: 'str\\ing'</p> </li> <li> <p><code>JOINED_STRING</code> - joined string example: 'part1part2'</p> </li> <li> <p><code>FSTRING</code> - f-string example: f'start{STRING}end'</p> </li> <li> <p><code>SLICE</code> - slice example: STRING[1:4:-1]</p> </li> <li> <p><code>SET</code> - set example: {1, 2, 3}</p> </li> <li> <p><code>LIST</code> - list example: [1, 2, 3]</p> </li> <li> <p><code>TUPLE</code> - tuple example: (1, 2, 3)</p> </li> <li> <p><code>DICT</code> - dict example: (1, 2, 3)</p> </li> <li> <p><code>DICT_COMP</code> - dict comprehension example: {k: 1 for k in range(3) if k &gt; -10}</p> </li> <li> <p><code>LIST_COMP</code> - list comprehension example: [k + 1 for k in range(3)]</p> </li> <li> <p><code>SET_COMP</code> - set comprehension example: {k + 1 for k in range(3)}</p> </li> <li> <p><code>GEN_EXPR</code> - generator expression example: (k + 1 for k in range(3))</p> </li> <li> <p><code>IF_EXPR</code> - if expression example: 5 if STRING else 6</p> </li> <li> <p><code>AWAIT</code> - await example: await STRING</p> </li> </ul>"},{"location":"examples/google_docstrings/","title":"Google docstrings examples","text":""},{"location":"examples/google_docstrings/#links","title":"Links","text":"<p>Google Python Style Guide</p> <p>Handsdown API Index / Examples / Google docstrings examples</p> <p>Auto-generated documentation for examples.google_docstrings module.</p>"},{"location":"examples/google_docstrings/#classexample","title":"ClassExample","text":"<p>Show source in google_docstrings.py:13</p> <p>Google-style class example</p>"},{"location":"examples/google_docstrings/#attributes","title":"Attributes","text":"<ul> <li><code>attr1</code> str - Description of <code>attr1</code>.</li> <li><code>attr2</code> :obj:<code>int</code>, optional - Description of <code>attr2</code>.</li> </ul>"},{"location":"examples/google_docstrings/#signature","title":"Signature","text":"<pre><code>class ClassExample:\n    ...\n</code></pre>"},{"location":"examples/google_docstrings/#classexamplemethod_example","title":"ClassExample().method_example","text":"<p>Show source in google_docstrings.py:22</p> <p>Summary line.</p> <p>Extended description of method.</p>"},{"location":"examples/google_docstrings/#examples","title":"Examples","text":"<p>Examples should be written in doctest format, and should illustrate how to use the function</p> <pre><code>&gt;&gt;&gt; print([i for i in\n... example_generator(2)])\n[\n    'one',\n    'two',\n]\n</code></pre> <pre><code>&gt;&gt;&gt; setup_env()\n&gt;&gt;&gt; func_call(\n...     first_name='test',\n...     last_name='test',\n... )\n</code></pre>"},{"location":"examples/google_docstrings/#arguments","title":"Arguments","text":"<ul> <li><code>text</code> str, optional - Description of arg1</li> <li><code>*args</code> str - Description of args</li> <li><code>**kwargs</code> str - Description of kwargs</li> </ul>"},{"location":"examples/google_docstrings/#returns","title":"Returns","text":"<ul> <li><code>int</code> - Description of return value</li> </ul>"},{"location":"examples/google_docstrings/#signature_1","title":"Signature","text":"<pre><code>def method_example(self, text: str = \"hello\") -&gt; int:\n    ...\n</code></pre>"},{"location":"examples/google_docstrings/#function_example","title":"function_example","text":"<p>Show source in google_docstrings.py:56</p> <p>Summary line.</p> <p>Extended description of function. You can use this function like</p> <pre><code>result = function_example(\n    {\n        'key': 'value',\n    },\n    None,\n)\n\nprint result\n</code></pre>"},{"location":"examples/google_docstrings/#arguments_1","title":"Arguments","text":"<ul> <li><code>arg1</code> int - Description of arg1</li> <li><code>arg2</code> str - Description of arg2</li> <li><code>arg3</code> str, optional - Description of arg3</li> </ul>"},{"location":"examples/google_docstrings/#returns_1","title":"Returns","text":"<ul> <li><code>bool</code> - Description of return value</li> </ul>"},{"location":"examples/google_docstrings/#raises","title":"Raises","text":"<ul> <li><code>AttributeError</code> - The <code>Raises</code> section is a list of all exceptions     that are relevant to the interface.</li> <li><code>ValueError</code> - If <code>param2</code> is equal to <code>param1</code>.</li> </ul>"},{"location":"examples/google_docstrings/#signature_2","title":"Signature","text":"<pre><code>def function_example(arg1, arg2, arg3=None):\n    ...\n</code></pre>"},{"location":"examples/google_docstrings/#function_with_pep484_type_annotations","title":"function_with_pep484_type_annotations","text":"<p>Show source in google_docstrings.py:87</p> <p>Example function with PEP 484 type annotations.</p>"},{"location":"examples/google_docstrings/#arguments_2","title":"Arguments","text":"<ul> <li><code>param1</code> - The first parameter.</li> <li><code>param2</code> - The second parameter.</li> </ul>"},{"location":"examples/google_docstrings/#returns_2","title":"Returns","text":"<p>The return value. True for success, False otherwise.</p>"},{"location":"examples/google_docstrings/#signature_3","title":"Signature","text":"<pre><code>def function_with_pep484_type_annotations(param1: int, param2: str) -&gt; bool:\n    ...\n</code></pre>"},{"location":"examples/main_example/","title":"Main Example","text":"<p>This is a module docstring. It will appear in documentation.</p>"},{"location":"examples/main_example/#notes","title":"Notes","text":"<p>You can use Markdown here to make it nicer. Also, in any docstring you can put a global object import string in backticks, like <code>other_module.OtherClass</code>, and it will be transformed to a link.</p> <p>Handsdown API Index / Examples / Main Example</p> <p>Auto-generated documentation for examples.main_example module.</p>"},{"location":"examples/main_example/#attributes","title":"Attributes","text":"<ul> <li><code>MODULE_NAME</code> - This is a comment-style documented global variable, so it is added to   <code>main_example</code> module attributes with this comment as a documentation for it: 'My Module'</li> </ul>"},{"location":"examples/main_example/#myclass","title":"MyClass","text":"<p>Show source in main_example.py:54</p>"},{"location":"examples/main_example/#attributes_1","title":"Attributes","text":"<ul> <li><code>STUFF_COUNT</code> - This is a comment-style documented class attribute, so it is added to   <code>main_example.MyClass</code> attributes with this comment as a documentation for it.: 3</li> </ul> <p>MyClass documentation here.</p>"},{"location":"examples/main_example/#notes_1","title":"Notes","text":"<p>This time we use RST docstrings format.</p>"},{"location":"examples/main_example/#signature","title":"Signature","text":"<pre><code>class MyClass(BaseClass):\n    ...\n</code></pre>"},{"location":"examples/main_example/#myclassbool","title":"MyClass().bool","text":"<p>Show source in main_example.py:92</p> <p>Magic methods are added to docs only if they have docstrings.</p>"},{"location":"examples/main_example/#returns","title":"Returns","text":"<p>True if STUFF_COUNT is not zero</p>"},{"location":"examples/main_example/#signature_1","title":"Signature","text":"<pre><code>def __bool__(self) -&gt; bool:\n    ...\n</code></pre>"},{"location":"examples/main_example/#myclassdo_something","title":"MyClass.do_something","text":"<p>Show source in main_example.py:65</p> <p>This is a public method that uses comment-style type annotations. If decorators or types from annotations are from your project, links to them will be added to <code>See also</code> section. Since this function depends on STUFF_COUNT, we can add it to a docstring in backticks and it will be transformed to a link.</p> <pre><code># usage example\ndef my_stuff(amount):\n    return amount &gt; 5\n\nMyClass.do_something(my_stuff)  # False\n</code></pre>"},{"location":"examples/main_example/#notes_2","title":"Notes","text":"<p>Added in version 1.3</p> <p>Deprecated in version 1.8</p> <p>Changed in version 1.4     All these directives are added to <code>Notes</code> section and formatted in Sphinx-style.</p>"},{"location":"examples/main_example/#arguments","title":"Arguments","text":"<ul> <li><code>stuff</code> - Function do execute.</li> </ul>"},{"location":"examples/main_example/#returns_1","title":"Returns","text":"<p><code>stuff</code> result.</p>"},{"location":"examples/main_example/#signature_2","title":"Signature","text":"<pre><code>@classmethod\ndef do_something(cls, stuff: StuffCallable) -&gt; bool:\n    ...\n</code></pre>"},{"location":"examples/main_example/#hello","title":"hello","text":"<p>Show source in main_example.py:27</p> <p>This is module function and it is added to documentation even if it does not have a docstring. Function signature will be also generated respecting regular and comment-style type annotations. Let's use PEP 257 format here.</p>"},{"location":"examples/main_example/#examples","title":"Examples","text":"<pre><code># Google-style code block here, but we could use Markdown code block as well\n&gt;&gt;&gt; hello('John')\n'Hello, John!'\n\n&gt;&gt;&gt; hello('')\n'Hello!'\n</code></pre>"},{"location":"examples/main_example/#arguments_1","title":"Arguments","text":"<ul> <li><code>name</code> - Name of the person to greet.</li> </ul>"},{"location":"examples/main_example/#returns_2","title":"Returns","text":"<p>A greeting. No need to put types here if you use type annotations.</p>"},{"location":"examples/main_example/#signature_3","title":"Signature","text":"<pre><code>def hello(name: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"examples/pep257_docstrings/","title":"PEP 257 - PEP 257 and Google docstrings examples","text":""},{"location":"examples/pep257_docstrings/#links","title":"Links","text":"<p>PEP 257 - Docstring Conventions</p> <p>Handsdown API Index / Examples / PEP 257 - PEP 257 and Google docstrings examples</p> <p>Auto-generated documentation for examples.pep257_docstrings module.</p>"},{"location":"examples/pep257_docstrings/#classexample","title":"ClassExample","text":"<p>Show source in pep257_docstrings.py:10</p> <p>PEP257-style class example</p>"},{"location":"examples/pep257_docstrings/#attributes","title":"Attributes","text":"<ul> <li><code>attr1</code> - Description of <code>attr1</code>.</li> <li><code>attr2</code> - Description of <code>attr2</code>.</li> </ul> <pre><code>Example of a code block\n</code></pre> <p>You can use <code>~~~</code> to start a block as well</p> <pre><code>MD block example inside a tilde block\n\n```python\nThis is not a codeblock, test inside tildes rendered as it is\n```\n</code></pre>"},{"location":"examples/pep257_docstrings/#signature","title":"Signature","text":"<pre><code>class ClassExample:\n    ...\n</code></pre>"},{"location":"examples/pep257_docstrings/#classexamplemethod_example","title":"ClassExample().method_example","text":"<p>Show source in pep257_docstrings.py:33</p> <p>Summary line.</p> <p>Extended description of method.</p>"},{"location":"examples/pep257_docstrings/#examples","title":"Examples","text":"<p>Examples should be written in doctest format, and should illustrate how to use the function.</p> <pre><code>&gt;&gt;&gt; print([i for i in\n... example_generator(2)])\n[\n    'one',\n    'two',\n]\n</code></pre> <pre><code>&gt;&gt;&gt; setup_env()\n&gt;&gt;&gt; func_call(\n...     first_name='test',\n...     last_name='test',\n... )\n</code></pre>"},{"location":"examples/pep257_docstrings/#arguments","title":"Arguments","text":"<ul> <li><code>text</code> - Description of arg1</li> <li><code>*args</code> - Description of args</li> <li><code>**kwargs</code> - Description of kwargs</li> </ul>"},{"location":"examples/pep257_docstrings/#returns","title":"Returns","text":"<p>Description of return value</p>"},{"location":"examples/pep257_docstrings/#signature_1","title":"Signature","text":"<pre><code>def method_example(self, text: str = \"hello\") -&gt; int:\n    ...\n</code></pre>"},{"location":"examples/pep257_docstrings/#function_example","title":"function_example","text":"<p>Show source in pep257_docstrings.py:66</p> <p>Form a complex number.</p>"},{"location":"examples/pep257_docstrings/#arguments_1","title":"Arguments","text":"<ul> <li><code>real</code> - the real part (default 0.0)</li> <li><code>imag</code> - the imaginary part (default 0.0)</li> </ul>"},{"location":"examples/pep257_docstrings/#signature_2","title":"Signature","text":"<pre><code>def function_example(real=0.0, imag=0.0):\n    ...\n</code></pre>"},{"location":"examples/pyi_typed/","title":"Stub file type annotations examples","text":""},{"location":"examples/pyi_typed/#links","title":"Links","text":"<p>Stub files</p> <p>Handsdown API Index / Examples / Stub file type annotations examples</p> <p>Auto-generated documentation for examples.pyi_typed module.</p>"},{"location":"examples/pyi_typed/#aasdas","title":"Aasdas","text":"<p>Show source in pyi_typed.py:25</p>"},{"location":"examples/pyi_typed/#attributes","title":"Attributes","text":"<ul> <li><code>c</code>: <code>str</code> - This comment should also appear in the docs</li> </ul> <p>Test class.</p>"},{"location":"examples/pyi_typed/#signature","title":"Signature","text":"<pre><code>class Aasdas:\n    ...\n</code></pre>"},{"location":"examples/pyi_typed/#myvalue","title":"MyValue","text":"<p>Show source in pyi_typed.py:13</p>"},{"location":"examples/pyi_typed/#signature_1","title":"Signature","text":"<pre><code>class MyValue:\n    ...\n</code></pre>"},{"location":"examples/pyi_typed/#func","title":"func","text":"<p>Show source in pyi_typed.py:17</p>"},{"location":"examples/pyi_typed/#signature_2","title":"Signature","text":"<pre><code>def func(_list, _my_value_cls=MyValue, **_kwargs):\n    ...\n</code></pre>"},{"location":"examples/pyi_typed/#see-also","title":"See also","text":"<ul> <li>MyValue</li> </ul>"},{"location":"examples/pyi_typed/#func_an","title":"func_an","text":"<p>Show source in pyi_typed.py:21</p>"},{"location":"examples/pyi_typed/#signature_3","title":"Signature","text":"<pre><code>def func_an(_list, _my_value_cls=MyValue, **_kwargs):\n    ...\n</code></pre>"},{"location":"examples/pyi_typed/#see-also_1","title":"See also","text":"<ul> <li>MyValue</li> </ul>"},{"location":"examples/rst_docstrings/","title":"PEP 287 - reStructuredText docstrings examples","text":""},{"location":"examples/rst_docstrings/#links","title":"Links","text":"<p>PEP 287 - reStructuredText Docstring Format</p> <p>Handsdown API Index / Examples / PEP 287 - reStructuredText docstrings examples</p> <p>Auto-generated documentation for examples.rst_docstrings module.</p>"},{"location":"examples/rst_docstrings/#rstexample","title":"RSTExample","text":"<p>Show source in rst_docstrings.py:10</p>"},{"location":"examples/rst_docstrings/#signature","title":"Signature","text":"<pre><code>class RSTExample:\n    ...\n</code></pre>"},{"location":"examples/rst_docstrings/#rstexamplereference","title":"RSTExample.reference","text":"<p>Show source in rst_docstrings.py:11</p> <p>This is a reference for <code>RST-style</code> docstrings. Check <code>source</code> code to see how it works.</p>"},{"location":"examples/rst_docstrings/#arguments","title":"Arguments","text":"<ul> <li><code>my_param</code> - Parameter example</li> <li><code>typed_param</code> int - Typed parameter example</li> </ul>"},{"location":"examples/rst_docstrings/#returns","title":"Returns","text":"<p>Type: str Return statement</p>"},{"location":"examples/rst_docstrings/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> -  Raises example</li> </ul> <p>Code example</p> <pre><code>data = {\n    'key': 'value',\n}\n\nprint(data)\n</code></pre>"},{"location":"examples/rst_docstrings/#signature_1","title":"Signature","text":"<pre><code>@staticmethod\ndef reference():\n    ...\n</code></pre>"},{"location":"examples/rst_docstrings/#rstexamplereplace_test","title":"RSTExample.replace_test","text":"<p>Show source in rst_docstrings.py:40</p> <p>Check if all attribute <code>attributes</code>, <code>data</code> and exception <code>Exception</code> in class RSTExample and class RSTExample look good.</p>"},{"location":"examples/rst_docstrings/#signature_2","title":"Signature","text":"<pre><code>@staticmethod\ndef replace_test():\n    ...\n</code></pre>"},{"location":"examples/rst_docstrings/#rstexamplertype_test","title":"RSTExample.rtype_test","text":"<p>Show source in rst_docstrings.py:31</p> <p><code>:rtype:</code> test.</p>"},{"location":"examples/rst_docstrings/#returns_1","title":"Returns","text":"<p>Return statement Type: bool</p>"},{"location":"examples/rst_docstrings/#signature_3","title":"Signature","text":"<pre><code>@staticmethod\ndef rtype_test():\n    ...\n</code></pre>"},{"location":"examples/sphinx_docstrings/","title":"Sphinx docstrings examples","text":""},{"location":"examples/sphinx_docstrings/#links","title":"Links","text":"<p>reStructuredText Primer</p> <p>Handsdown API Index / Examples / Sphinx docstrings examples</p> <p>Auto-generated documentation for examples.sphinx_docstrings module.</p>"},{"location":"examples/sphinx_docstrings/#rstexample","title":"RSTExample","text":"<p>Show source in sphinx_docstrings.py:10</p>"},{"location":"examples/sphinx_docstrings/#signature","title":"Signature","text":"<pre><code>class RSTExample:\n    ...\n</code></pre>"},{"location":"examples/sphinx_docstrings/#rstexampledirectives_test","title":"RSTExample.directives_test","text":"<p>Show source in sphinx_docstrings.py:33</p> <p>Test for some random Sphinx directives</p> <pre><code>def sum_eq_n?(arr, n)\n    return true if arr.empty? &amp;&amp; n == 0\n    arr.product(arr).reject { |a,b| a == b }.any? { |a,b| a + b == n }\nend\n</code></pre>"},{"location":"examples/sphinx_docstrings/#notes","title":"Notes","text":"<p>short note</p> <pre><code>(a + b)^2 = a^2 + 2ab + b^2\n\n(a - b)^2 = a^2 - 2ab + b^2\n</code></pre>"},{"location":"examples/sphinx_docstrings/#see-also","title":"See also","text":"<p>modules mod:<code>zipfile</code>, mod:<code>tarfile</code></p>"},{"location":"examples/sphinx_docstrings/#signature_1","title":"Signature","text":"<pre><code>@staticmethod\ndef directives_test():\n    ...\n</code></pre>"},{"location":"examples/sphinx_docstrings/#rstexamplereference","title":"RSTExample.reference","text":"<p>Show source in sphinx_docstrings.py:11</p> <p>This is a reference for <code>Sphinx-style RST-style</code> docstrings. Check <code>source</code> code to see how it works.</p> <p>Code example</p> <pre><code>data = {\n    'key': 'value',\n}\n\nprint(data)\n</code></pre>"},{"location":"examples/sphinx_docstrings/#arguments","title":"Arguments","text":"<ul> <li><code>my_param</code> - Parameter example</li> <li><code>typed_param</code> int - Typed parameter example</li> </ul>"},{"location":"examples/sphinx_docstrings/#returns","title":"Returns","text":"<p>Type: str Return statement</p>"},{"location":"examples/sphinx_docstrings/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> -  Raises example</li> </ul>"},{"location":"examples/sphinx_docstrings/#signature_2","title":"Signature","text":"<pre><code>@staticmethod\ndef reference():\n    ...\n</code></pre>"},{"location":"examples/sphinx_docstrings/#rstexampleversion_directives_test","title":"RSTExample.version_directives_test","text":"<p>Show source in sphinx_docstrings.py:57</p> <p>Test for Version-related directives</p>"},{"location":"examples/sphinx_docstrings/#notes_1","title":"Notes","text":"<p>Added in version 2.5     The spam parameter.</p> <p>Changed in version 2.7     Mandatory spam parameter.</p> <p>Deprecated in version 3.1     Use :func:<code>spam</code> instead.</p>"},{"location":"examples/sphinx_docstrings/#signature_3","title":"Signature","text":"<pre><code>@staticmethod\ndef version_directives_test():\n    ...\n</code></pre>"},{"location":"examples/typed/","title":"PEP 484 - type annotations examples","text":""},{"location":"examples/typed/#links","title":"Links","text":"<p>PEP 484 - Type Hints</p> <p>Handsdown API Index / Examples / PEP 484 - type annotations examples</p> <p>Auto-generated documentation for examples.typed module.</p>"},{"location":"examples/typed/#myvalue","title":"MyValue","text":"<p>Show source in typed.py:11</p>"},{"location":"examples/typed/#signature","title":"Signature","text":"<pre><code>class MyValue:\n    ...\n</code></pre>"},{"location":"examples/typed/#typed","title":"Typed","text":"<p>Show source in typed.py:15</p>"},{"location":"examples/typed/#signature_1","title":"Signature","text":"<pre><code>class Typed:\n    def __init__(\n        self,\n        _value: Union[List[str], str, MyValue] = MyValue(\n            {\n                \"key1\": \"value1\",\n                \"key2\": \"value2\",\n                \"key3\": \"value3\",\n                \"key4\": \"value4\",\n                \"key5\": \"value5\",\n                \"key6\": \"value6\",\n            }\n        ),\n        _name: str = \"default\",\n    ) -&gt; Dict[str, MyValue]:\n        ...\n</code></pre>"},{"location":"examples/typed/#see-also","title":"See also","text":"<ul> <li>MyValue</li> </ul>"},{"location":"examples/typed/#typedasync_method","title":"Typed().async_method","text":"<p>Show source in typed.py:37</p>"},{"location":"examples/typed/#signature_2","title":"Signature","text":"<pre><code>async def async_method(self, _value: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"examples/typed/#typedclassmethod","title":"Typed.classmethod","text":"<p>Show source in typed.py:33</p>"},{"location":"examples/typed/#signature_3","title":"Signature","text":"<pre><code>@classmethod\ndef classmethod(cls, _my_value: MyValue, *_args: str, **_kwargs: Any) -&gt; None:\n    ...\n</code></pre>"},{"location":"examples/typed/#see-also_1","title":"See also","text":"<ul> <li>MyValue</li> </ul>"},{"location":"examples/typed/#func","title":"func","text":"<p>Show source in typed.py:45</p>"},{"location":"examples/typed/#signature_4","title":"Signature","text":"<pre><code>@my_deco(key=\"value\")\ndef func(\n    _list: Tuple[List[str], ...], _my_value_cls: Type[MyValue] = MyValue, **_kwargs: None\n) -&gt; Optional[MyValue]:\n    ...\n</code></pre>"},{"location":"examples/typed/#see-also_2","title":"See also","text":"<ul> <li>MyValue</li> </ul>"},{"location":"examples/typed/#my_deco","title":"my_deco","text":"<p>Show source in typed.py:41</p>"},{"location":"examples/typed/#signature_5","title":"Signature","text":"<pre><code>def my_deco(key):\n    ...\n</code></pre>"},{"location":"handsdown/","title":"Handsdown","text":"<p>Root of <code>handsdown</code> source code.</p>"},{"location":"handsdown/#handsdown_1","title":"Handsdown","text":"<p>Python package <code>handsdown</code> provides types, functions, and a command-line interface for accessing public documentation of Python modules, and for presenting it in a Markdown format ready to be publiched to GitHub Pages or Read the Docs.</p> <p><code>handsdown</code> extracts documentation of:</p> <ul> <li>Modules</li> <li>docstring</li> <li>submodules</li> <li>function definitions</li> <li>class definitions</li> <li>global variables documented in comment-style</li> <li>global objects mentioned in docstring</li> <li>Functions</li> <li>docstring</li> <li>arguments</li> <li>decorators</li> <li>type annotations</li> <li>global objects mentioned in docstring</li> <li>parent module objects mentioned in docstring</li> <li>Classes</li> <li>docstring</li> <li><code>__init__</code> method</li> <li>public methods</li> <li>magic methods with defined docstring</li> <li>attributes documented in comment-style</li> <li>decorators</li> <li>base classes</li> <li>global objects mentioned in docstring</li> <li>parent module objects mentioned in docstring</li> <li>Class methods</li> <li>docstring</li> <li>arguments</li> <li>decorators</li> <li>type annotations</li> <li>global objects mentioned in docstring</li> <li>parent class objects mentioned in docstring</li> <li>parent module objects mentioned in docstring</li> </ul>"},{"location":"handsdown/#prepare-your-code","title":"Prepare your code","text":"<pre><code># main_example.py\n\"\"\"\nThis is a module docstring. It will appear in documentation.\n\n## Notes\n\nYou can use Markdown here to make it nicer. Also, in any docstring you\ncan put a global object import string in backticks, like `other_module.OtherClass`,\nand it will be transformed to a link.\n\"\"\"\nfrom typing import Text, TYPE_CHECKING\n\nfrom my_project.other_module import BaseClass  # pylint: disable=import-error\n\nif TYPE_CHECKING:\n    from my_project.type_defs import StuffCallable  # pylint: disable=import-error\n\n# This is a comment-style documented global variable, so it is added to\n# `main_example` module attributes with this comment as a documentation for it\n# FIXME: FIXME and TODO comments are igonred\nMODULE_NAME = \"My Module\"\n\n# Private args never appear in docs\n_PRIVATE_ATTR = \"Private attr\"\n\n\ndef hello(name: Text) -&gt; Text:\n    \"\"\"\n    This is module function and it is added to documentation even if it does\n    not have a docstring. Function signature will be also generated respecting\n    regular and comment-style type annotations. Let's use PEP 257 format here.\n\n    Examples::\n\n        # Google-style code block here, but we could use Markdown code block as well\n        &gt;&gt;&gt; hello('John')\n        'Hello, John!'\n\n        &gt;&gt;&gt; hello('')\n        'Hello!'\n\n    Arguments:\n        name -- Name of the person to greet.\n\n    Returns:\n        A greeting. No need to put types here if you use type annotations.\n    \"\"\"\n    if not name:\n        return \"Hello!\"\n\n    return f\"Hello, {name}!\"\n\n\nclass MyClass(BaseClass):\n    \"\"\"\n    MyClass documentation here.\n\n    .. note:: This time we use RST docstrings format.\n    \"\"\"\n\n    # This is a comment-style documented class attribute, so it is added to\n    # `main_example.MyClass` attributes with this comment as a documentation for it.\n    STUFF_COUNT = 3\n\n    @classmethod\n    def do_something(cls, stuff):\n        # type: (StuffCallable) -&gt; bool\n        \"\"\"\n        This is a public method that uses comment-style type annotations. If decorators\n        or types from annotations are from your project, links to them will be added\n        to `See also` section. Since this function depends on `STUFF_COUNT`, we can add\n        it to a docstring in backticks and it will be transformed to a link.\n\n        .. code-block:: python\n\n            # usage example\n            def my_stuff(amount):\n                return amount &gt; 5\n\n            MyClass.do_something(my_stuff)  # False\n\n        .. versionadded:: 1.3\n        .. deprecated:: 1.8\n        .. versionchanged:: 1.4\n            All these directives are added to `Notes` section and formatted in Sphinx-style.\n\n        :param stuff: Function do execute.\n        :returns: `stuff` result.\n        \"\"\"\n        return stuff(cls.STUFF_COUNT)\n\n    def __bool__(self):\n        # type: () -&gt; bool\n        \"\"\"\n        Magic methods are added to docs only if they have docstrings.\n\n        :returns: True if `STUFF_COUNT` is not zero\n        \"\"\"\n        return self.STUFF_COUNT\n</code></pre>"},{"location":"handsdown/#usage","title":"Usage","text":""},{"location":"handsdown/#from-command-line","title":"From command line","text":"<p>Just go to your favorite project that has lots of docstrings but missing auto-generated docs and let <code>handsdown</code> do the thing.</p> <pre><code>cd ~/my/project\n\n# build documentation *.md* files in docs/* directory\nhandsdown\n\n# or provide custom output directory: output_dir/*\nhandsdown -o output_dir\n\n# generate docs only for my_module, but exclude migrations\nhandsdown my_module --exclude 'build/*' 'tests/*' 'test/*' '*/__pycache__/*' '.*/*' 'my_module/migrations'\n\n# generate documentation for deployment\nhandsdown --external `git config --get remote.origin.url` -n ProjectName\n</code></pre> <p>Navigate to <code>docs/README.md</code> to check your new documentation!</p>"},{"location":"handsdown/#as-a-module","title":"As a module","text":"<pre><code>from handsdown.generator import Generator\nfrom handsdown.utils.path_finder import PathFinder\n\n# this is our project root directory\nrepo_path = Path.cwd()\n\n# this little tool works like `pathlib.Path.glob` with some extra magic\n# but in this case `repo_path.glob(\"**/*.py\")` would do as well\npath_finder = PathFinder(repo_path, \"**/*.py\")\n\n# no docs for tests and build\npath_finder.exclude(\"tests/*\", \"build/*\")\n\n# initialize generator\nhandsdown = Generator(\n    input_path=repo_path,\n    output_path=repo_path / 'output',\n    source_paths=path_finder.glob(\"**/*.py\")\n)\n\n# generate all docs at once\nhandsdown.generate_docs()\n\n# or generate just for one doc\nhandsdown.generate_doc(repo_path / 'my_module' / 'source.py')\n\n# and generate index.md file\nhandsdown.generate_index()\n\n# navigate to `output` dir and check results\n</code></pre>"},{"location":"handsdown/#installation","title":"Installation","text":"<p>Install using pip</p> <pre><code>pip install handsdown\n</code></pre>"},{"location":"handsdown/#more-examples","title":"More examples","text":"<ul> <li>All documentation in this project</li> <li>Main with generated output</li> <li>RST docstrings with generated output</li> <li>Google docstrings with generated output</li> <li>PEP 257 docstrings with generated output</li> <li>Sphinx docstrings with generated output</li> <li>Type annotations with generated output</li> <li>Comment-style type annotations with generated output</li> </ul> <p>Handsdown API Index / Handsdown</p> <p>Auto-generated documentation for handsdown module.</p>"},{"location":"handsdown/#modules","title":"Modules","text":"<ul> <li>Module</li> <li>AST Parser</li> <li>Cli Parser</li> <li>Constants</li> <li>Exceptions</li> <li>Generators</li> <li>JinjaManager</li> <li>Loader</li> <li>Main</li> <li>MDDocument</li> <li>Processors</li> <li>Utils</li> </ul>"},{"location":"handsdown/cli_parser/","title":"Cli Parser","text":"<p>CLI Parser.</p> <p>Handsdown API Index / Handsdown / Cli Parser</p> <p>Auto-generated documentation for handsdown.cli_parser module.</p>"},{"location":"handsdown/cli_parser/#clinamespace","title":"CLINamespace","text":"<p>Show source in cli_parser.py:22</p> <p>Main CLI Namespace.</p>"},{"location":"handsdown/cli_parser/#signature","title":"Signature","text":"<pre><code>class CLINamespace:\n    ...\n</code></pre>"},{"location":"handsdown/cli_parser/#clinamespaceget_source_code_url","title":"CLINamespace().get_source_code_url","text":"<p>Show source in cli_parser.py:44</p> <p>Get URL to source code.</p>"},{"location":"handsdown/cli_parser/#returns","title":"Returns","text":"<p>URL as a string.</p>"},{"location":"handsdown/cli_parser/#signature_1","title":"Signature","text":"<pre><code>def get_source_code_url(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/cli_parser/#abs_path","title":"abs_path","text":"<p>Show source in cli_parser.py:93</p> <p>Validate <code>path_str</code> and make it absolute.</p>"},{"location":"handsdown/cli_parser/#arguments","title":"Arguments","text":"<ul> <li><code>path_str</code> - A path to check.</li> </ul>"},{"location":"handsdown/cli_parser/#returns_1","title":"Returns","text":"<p>An absolute path.</p>"},{"location":"handsdown/cli_parser/#signature_2","title":"Signature","text":"<pre><code>def abs_path(path_str: str) -&gt; Path:\n    ...\n</code></pre>"},{"location":"handsdown/cli_parser/#dir_abs_path","title":"dir_abs_path","text":"<p>Show source in cli_parser.py:106</p> <p>Validate directory <code>path_str</code> and make it absolute.</p>"},{"location":"handsdown/cli_parser/#arguments_1","title":"Arguments","text":"<ul> <li><code>path_str</code> - A path to check.</li> </ul>"},{"location":"handsdown/cli_parser/#returns_2","title":"Returns","text":"<p>An absolute path.</p>"},{"location":"handsdown/cli_parser/#raises","title":"Raises","text":"<ul> <li><code>argparse.ArgumentTypeError</code> - If path is not a directory.</li> </ul>"},{"location":"handsdown/cli_parser/#signature_3","title":"Signature","text":"<pre><code>def dir_abs_path(path_str: str) -&gt; Path:\n    ...\n</code></pre>"},{"location":"handsdown/cli_parser/#existing_dir_abs_path","title":"existing_dir_abs_path","text":"<p>Show source in cli_parser.py:125</p> <p>Validate existing directory <code>path_str</code> and make it absolute.</p>"},{"location":"handsdown/cli_parser/#arguments_2","title":"Arguments","text":"<ul> <li><code>path_str</code> - A path to check.</li> </ul>"},{"location":"handsdown/cli_parser/#returns_3","title":"Returns","text":"<p>An absolute path.</p>"},{"location":"handsdown/cli_parser/#raises_1","title":"Raises","text":"<ul> <li><code>argparse.ArgumentTypeError</code> - If path does not exist or is not a directory.</li> </ul>"},{"location":"handsdown/cli_parser/#signature_4","title":"Signature","text":"<pre><code>def existing_dir_abs_path(path_str: str) -&gt; Path:\n    ...\n</code></pre>"},{"location":"handsdown/cli_parser/#git_repo","title":"git_repo","text":"<p>Show source in cli_parser.py:65</p> <p>Validate <code>git_repo_url</code> to be a GitHub repo and converts SSH urls to HTTPS.</p>"},{"location":"handsdown/cli_parser/#arguments_3","title":"Arguments","text":"<ul> <li><code>git_repo_url</code> - GitHub URL or <code>remote.origin.url</code></li> </ul>"},{"location":"handsdown/cli_parser/#returns_4","title":"Returns","text":"<p>A GitHub URL.</p>"},{"location":"handsdown/cli_parser/#signature_5","title":"Signature","text":"<pre><code>def git_repo(git_repo_url: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/cli_parser/#parse_args","title":"parse_args","text":"<p>Show source in cli_parser.py:164</p> <p>Get CLI arguments parser.</p>"},{"location":"handsdown/cli_parser/#returns_5","title":"Returns","text":"<p>An <code>argparse.ArgumentParser</code> instance.</p>"},{"location":"handsdown/cli_parser/#signature_6","title":"Signature","text":"<pre><code>def parse_args(args: Iterable[str]) -&gt; CLINamespace:\n    ...\n</code></pre>"},{"location":"handsdown/cli_parser/#see-also","title":"See also","text":"<ul> <li>CLINamespace</li> </ul>"},{"location":"handsdown/cli_parser/#parse_theme","title":"parse_theme","text":"<p>Show source in cli_parser.py:146</p> <p>Cast theme name to <code>Theme</code>.</p>"},{"location":"handsdown/cli_parser/#signature_7","title":"Signature","text":"<pre><code>def parse_theme(name: str) -&gt; Theme:\n    ...\n</code></pre>"},{"location":"handsdown/cli_parser/#see-also_1","title":"See also","text":"<ul> <li>Theme</li> </ul>"},{"location":"handsdown/constants/","title":"Constants","text":"<p>Various project constants.</p> <p>Handsdown API Index / Handsdown / Constants</p> <p>Auto-generated documentation for handsdown.constants module.</p>"},{"location":"handsdown/constants/#attributes","title":"Attributes","text":"<ul> <li> <p><code>PACKAGE_NAME</code> - Package name.: 'handsdown'</p> </li> <li> <p><code>LOGGER_NAME</code> - Global <code>logging.Logger</code> name.: 'handsdown'</p> </li> <li> <p><code>EXCLUDE_EXPRS</code> - Paths to exclude from docs generation.: ['build/', 'tests/', 'test/', '/pycache/', './*']</p> </li> <li> <p><code>SOURCES_GLOB</code> - <code>glob.glob</code> expression to ind all Python sources in current directory.: '*/.py'</p> </li> <li> <p><code>ENCODING</code> - Default encoding for source files: 'utf-8'</p> </li> </ul>"},{"location":"handsdown/constants/#theme","title":"Theme","text":"<p>Show source in constants.py:22</p>"},{"location":"handsdown/constants/#signature","title":"Signature","text":"<pre><code>class Theme(enum.Enum):\n    ...\n</code></pre>"},{"location":"handsdown/exceptions/","title":"Exceptions","text":"<p>Exceptions used by the project.</p> <p>Handsdown API Index / Handsdown / Exceptions</p> <p>Auto-generated documentation for handsdown.exceptions module.</p>"},{"location":"handsdown/exceptions/#generatorerror","title":"GeneratorError","text":"<p>Show source in exceptions.py:6</p> <p>Main error for <code>BaseGenerator</code>.</p>"},{"location":"handsdown/exceptions/#signature","title":"Signature","text":"<pre><code>class GeneratorError(Exception):\n    ...\n</code></pre>"},{"location":"handsdown/exceptions/#importstringerror","title":"ImportStringError","text":"<p>Show source in exceptions.py:18</p> <p>Main error for <code>ImportString</code>.</p>"},{"location":"handsdown/exceptions/#signature_1","title":"Signature","text":"<pre><code>class ImportStringError(Exception):\n    ...\n</code></pre>"},{"location":"handsdown/exceptions/#loadererror","title":"LoaderError","text":"<p>Show source in exceptions.py:12</p> <p>Main error for <code>Loader</code>.</p>"},{"location":"handsdown/exceptions/#signature_2","title":"Signature","text":"<pre><code>class LoaderError(Exception):\n    ...\n</code></pre>"},{"location":"handsdown/exceptions/#parsererror","title":"ParserError","text":"<p>Show source in exceptions.py:30</p> <p>Main error for source code parsing issues.</p>"},{"location":"handsdown/exceptions/#signature_3","title":"Signature","text":"<pre><code>class ParserError(Exception):\n    ...\n</code></pre>"},{"location":"handsdown/exceptions/#pathfindererror","title":"PathFinderError","text":"<p>Show source in exceptions.py:24</p> <p>Main error for <code>PathFinder</code>.</p>"},{"location":"handsdown/exceptions/#signature_4","title":"Signature","text":"<pre><code>class PathFinderError(Exception):\n    ...\n</code></pre>"},{"location":"handsdown/jinja_manager/","title":"JinjaManager","text":"<p>Jinja2 <code>Environment</code> manager.</p> <p>Handsdown API Index / Handsdown / JinjaManager</p> <p>Auto-generated documentation for handsdown.jinja_manager module.</p>"},{"location":"handsdown/jinja_manager/#jinjamanager_1","title":"JinjaManager","text":"<p>Show source in jinja_manager.py:13</p> <p>Jinja2 <code>Environment</code> manager.</p>"},{"location":"handsdown/jinja_manager/#signature","title":"Signature","text":"<pre><code>class JinjaManager:\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/jinja_manager/#jinjamanagerenv","title":"JinjaManager().env","text":"<p>Show source in jinja_manager.py:45</p> <p>Get <code>jinja2.Environment</code>.</p>"},{"location":"handsdown/jinja_manager/#signature_1","title":"Signature","text":"<pre><code>@property\ndef env(self) -&gt; jinja2.Environment:\n    ...\n</code></pre>"},{"location":"handsdown/jinja_manager/#jinjamanagerescape_md","title":"JinjaManager.escape_md","text":"<p>Show source in jinja_manager.py:38</p> <p>Escape underscore characters.</p>"},{"location":"handsdown/jinja_manager/#signature_2","title":"Signature","text":"<pre><code>@staticmethod\ndef escape_md(value: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/jinja_manager/#jinjamanagerrender","title":"JinjaManager().render","text":"<p>Show source in jinja_manager.py:59</p>"},{"location":"handsdown/jinja_manager/#signature_3","title":"Signature","text":"<pre><code>def render(self, template_path: Path, **kwargs: Any) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/jinja_manager/#jinjamanagertrim_eof","title":"JinjaManager.trim_eof","text":"<p>Show source in jinja_manager.py:52</p> <p>Trim EOF newlines and add one newline.</p>"},{"location":"handsdown/jinja_manager/#signature_4","title":"Signature","text":"<pre><code>@staticmethod\ndef trim_eof(value: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/jinja_manager/#jinjamanagerupdate_globals","title":"JinjaManager.update_globals","text":"<p>Show source in jinja_manager.py:28</p> <p>Update global variables in <code>jinja2.Environment</code>.</p>"},{"location":"handsdown/jinja_manager/#arguments","title":"Arguments","text":"<ul> <li><code>kwargs</code> - Globals to set.</li> </ul>"},{"location":"handsdown/jinja_manager/#signature_5","title":"Signature","text":"<pre><code>@classmethod\ndef update_globals(cls, **kwargs: object) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/loader/","title":"Loader","text":"<p>Loader for python source code.</p> <p>Handsdown API Index / Handsdown / Loader</p> <p>Auto-generated documentation for handsdown.loader module.</p>"},{"location":"handsdown/loader/#loader_1","title":"Loader","text":"<p>Show source in loader.py:17</p> <p>Loader for python source code.</p>"},{"location":"handsdown/loader/#examples","title":"Examples","text":"<pre><code>loader = Loader(Path('path/to/my_module/'))\nmy_module_utils = loader.import_module('my_module.utils')\n</code></pre>"},{"location":"handsdown/loader/#arguments","title":"Arguments","text":"<ul> <li><code>root_path</code> - Root path of the project.</li> <li><code>output_path</code> - Docs output path.</li> <li><code>encoding</code> - File encoding.</li> </ul>"},{"location":"handsdown/loader/#signature","title":"Signature","text":"<pre><code>class Loader:\n    def __init__(\n        self, root_path: Path, output_path: Path, encoding: str = ENCODING\n    ) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/loader/#see-also","title":"See also","text":"<ul> <li>ENCODING</li> </ul>"},{"location":"handsdown/loader/#loader_get_output_path","title":"Loader()._get_output_path","text":"<p>Show source in loader.py:39</p> <p>Get output MD document path based on <code>source_path</code>.</p>"},{"location":"handsdown/loader/#arguments_1","title":"Arguments","text":"<ul> <li><code>source_path</code> - Path to source code file.</li> </ul>"},{"location":"handsdown/loader/#returns","title":"Returns","text":"<p>A path to the output <code>.md</code> file even if it does not exist yet.</p>"},{"location":"handsdown/loader/#signature_1","title":"Signature","text":"<pre><code>def _get_output_path(self, source_path: Path) -&gt; Path:\n    ...\n</code></pre>"},{"location":"handsdown/loader/#loaderget_import_string","title":"Loader().get_import_string","text":"<p>Show source in loader.py:124</p> <p>Get Python import string for a source <code>source_path</code> relative to <code>root_path</code>.</p>"},{"location":"handsdown/loader/#examples_1","title":"Examples","text":"<pre><code>loader = Loader(root_path=Path(\"/root\"), ...)\nloader.get_import_string('/root/my_module/test.py')\n'my_module.test'\n\nloader.get_import_string('/root/my_module/__init__.py')\n'my_module'\n</code></pre>"},{"location":"handsdown/loader/#arguments_2","title":"Arguments","text":"<ul> <li><code>source_path</code> - Path to a source file.</li> </ul>"},{"location":"handsdown/loader/#returns_1","title":"Returns","text":"<p>A Python import string.</p>"},{"location":"handsdown/loader/#signature_2","title":"Signature","text":"<pre><code>def get_import_string(self, source_path: Path) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/loader/#loaderget_module_record","title":"Loader().get_module_record","text":"<p>Show source in loader.py:59</p> <p>Build <code>ModuleRecord</code> for given <code>source_path</code>.</p>"},{"location":"handsdown/loader/#arguments_3","title":"Arguments","text":"<ul> <li><code>source_path</code> - Absolute path to source file.</li> </ul>"},{"location":"handsdown/loader/#returns_2","title":"Returns","text":"<p>A new <code>ModuleRecord</code> instance or None if there is ntohing to import.</p>"},{"location":"handsdown/loader/#raises","title":"Raises","text":"<ul> <li><code>LoaderError</code> - If python source cannot be loaded.</li> </ul>"},{"location":"handsdown/loader/#signature_3","title":"Signature","text":"<pre><code>def get_module_record(self, source_path: Path) -&gt; Optional[ModuleRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/loader/#see-also_1","title":"See also","text":"<ul> <li>ModuleRecord</li> </ul>"},{"location":"handsdown/loader/#loaderparse_module_record","title":"Loader.parse_module_record","text":"<p>Show source in loader.py:109</p> <p>Parse <code>ModuleRecord</code> children and fully load a tree for it.</p>"},{"location":"handsdown/loader/#raises_1","title":"Raises","text":"<ul> <li><code>LoaderError</code> - If python source cannot be parsed.</li> </ul>"},{"location":"handsdown/loader/#signature_4","title":"Signature","text":"<pre><code>@staticmethod\ndef parse_module_record(module_record: ModuleRecord) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/loader/#see-also_2","title":"See also","text":"<ul> <li>ModuleRecord</li> </ul>"},{"location":"handsdown/main/","title":"Main","text":"<p>Main CLI entrypoint for <code>handsdown</code>.</p> <p>Handsdown API Index / Handsdown / Main</p> <p>Auto-generated documentation for handsdown.main module.</p>"},{"location":"handsdown/main/#api","title":"api","text":"<p>Show source in main.py:27</p>"},{"location":"handsdown/main/#signature","title":"Signature","text":"<pre><code>def api(args: CLINamespace) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/main/#see-also","title":"See also","text":"<ul> <li>CLINamespace</li> </ul>"},{"location":"handsdown/main/#main_1","title":"main","text":"<p>Show source in main.py:55</p> <p>Main entrypoint for CLI.</p>"},{"location":"handsdown/main/#signature_1","title":"Signature","text":"<pre><code>def main() -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/main/#select_generator_cls","title":"select_generator_cls","text":"<p>Show source in main.py:17</p> <p>Select a generator based on the theme.</p>"},{"location":"handsdown/main/#signature_2","title":"Signature","text":"<pre><code>def select_generator_cls(theme: Theme) -&gt; Type[BaseGenerator]:\n    ...\n</code></pre>"},{"location":"handsdown/main/#see-also_1","title":"See also","text":"<ul> <li>BaseGenerator</li> <li>Theme</li> </ul>"},{"location":"handsdown/md_document/","title":"MDDocument","text":"<p>Markdown file builder.</p> <p>Handsdown API Index / Handsdown / MDDocument</p> <p>Auto-generated documentation for handsdown.md_document module.</p>"},{"location":"handsdown/md_document/#mddocument_1","title":"MDDocument","text":"<p>Show source in md_document.py:23</p> <p>Markdown file builder.</p> <p>Can be used as a context manager, on exit context is written to <code>path</code>.</p>"},{"location":"handsdown/md_document/#examples","title":"Examples","text":"<pre><code>md_doc = MDDocument(path=Path('output.md'))\nmd_doc.append('## New section')\nmd_doc.append('some content')\nmd_doc.title = 'My doc'\nmd_doc.write()\n\n# output is indented for readability\nPath('output.md').read_text()\n'''# My doc\n\n- [My doc](#my-doc)\n  - [New section](#new-section)\n\n## New section\n\nsome content\n'''\n\nwith MDDocument(path=Path('output.md')) as md_document:\n    md_document.title = 'My doc'\n    md_doc.append_title('New section', level=2)\n    md_doc.append('New line')\n</code></pre>"},{"location":"handsdown/md_document/#arguments","title":"Arguments","text":"<ul> <li><code>path</code> - Path to store document.</li> </ul>"},{"location":"handsdown/md_document/#signature","title":"Signature","text":"<pre><code>class MDDocument:\n    def __init__(self, path: Path, encoding: str = ENCODING) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/md_document/#see-also","title":"See also","text":"<ul> <li>ENCODING</li> </ul>"},{"location":"handsdown/md_document/#mddocumentappend","title":"MDDocument().append","text":"<p>Show source in md_document.py:310</p> <p>Append <code>content</code> to the document.</p> <p>Handle trimming and sectioning the content and update MDDocument().title and MDDocument().toc_section fields.</p>"},{"location":"handsdown/md_document/#arguments_1","title":"Arguments","text":"<ul> <li><code>content</code> - Text to add.</li> </ul>"},{"location":"handsdown/md_document/#signature_1","title":"Signature","text":"<pre><code>def append(self, content: str) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentget_anchor","title":"MDDocument.get_anchor","text":"<p>Show source in md_document.py:128</p> <p>Convert title to a GitHub-friendly anchor link.</p>"},{"location":"handsdown/md_document/#returns","title":"Returns","text":"<p>A test of anchor link.</p>"},{"location":"handsdown/md_document/#signature_2","title":"Signature","text":"<pre><code>@classmethod\ndef get_anchor(cls, title: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentget_doc_link","title":"MDDocument().get_doc_link","text":"<p>Show source in md_document.py:221</p> <p>Get Markdown link to a local MD document, use relative path as a link.</p>"},{"location":"handsdown/md_document/#arguments_2","title":"Arguments","text":"<ul> <li>MDDocument().path - Path to local MDDocument</li> <li><code>anchor</code> - Unescaped or escaped anchor tag</li> </ul>"},{"location":"handsdown/md_document/#returns_1","title":"Returns","text":"<p>A string with Markdown link.</p>"},{"location":"handsdown/md_document/#signature_3","title":"Signature","text":"<pre><code>def get_doc_link(self, path: Path, anchor: str = \"\") -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentis_toc","title":"MDDocument.is_toc","text":"<p>Show source in md_document.py:140</p> <p>Check if the section is Tree of Contents.</p>"},{"location":"handsdown/md_document/#returns_2","title":"Returns","text":"<p>True the section is ToC.</p>"},{"location":"handsdown/md_document/#signature_4","title":"Signature","text":"<pre><code>@staticmethod\ndef is_toc(section: str) -&gt; bool:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentpath","title":"MDDocument().path","text":"<p>Show source in md_document.py:303</p> <p>Output path of the document.</p>"},{"location":"handsdown/md_document/#signature_5","title":"Signature","text":"<pre><code>@property\ndef path(self) -&gt; Path:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentread","title":"MDDocument().read","text":"<p>Show source in md_document.py:94</p> <p>Read and parse content from <code>source_path</code>.</p>"},{"location":"handsdown/md_document/#arguments_3","title":"Arguments","text":"<ul> <li><code>source_path</code> - Input file path. If not provided - MDDocument().path is used.</li> <li><code>encoding</code> - File encoding.</li> </ul>"},{"location":"handsdown/md_document/#signature_6","title":"Signature","text":"<pre><code>def read(self, path: Path) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentrender_doc_link","title":"MDDocument().render_doc_link","text":"<p>Show source in md_document.py:179</p> <p>Render Markdown link to a local MD document, use relative path as a link.</p>"},{"location":"handsdown/md_document/#examples_1","title":"Examples","text":"<pre><code>md_doc = MDDocument(path='/root/parent/doc.md')\nMDDocument.render_doc_link(\n    'my title',\n    anchor='my-anchor',\n    target_path=Path('/root/parent/doc.md'\n)\n'[my title](#my-anchor)'\n\nMDDocument.render_doc_link('my title', target_path=Path('/root/parent/other.md'))\n'[my title](other.md)'\n\nMDDocument.render_doc_link('my title', anchor='my-anchor', target_path=Path('doc.md'))\n'[my title](doc.md#my-anchor)'\n\nMDDocument.render_doc_link('my title', anchor='my-anchor')\n'[my title](#my-anchor)'\n</code></pre>"},{"location":"handsdown/md_document/#arguments_4","title":"Arguments","text":"<ul> <li>MDDocument().title - Link text.</li> <li><code>anchor</code> - Unescaped or escaped anchor tag.</li> <li><code>target_path</code> - Target MDDocument path.</li> </ul>"},{"location":"handsdown/md_document/#returns_3","title":"Returns","text":"<p>A string with Markdown link.</p>"},{"location":"handsdown/md_document/#signature_7","title":"Signature","text":"<pre><code>def render_doc_link(\n    self, title: str, anchor: str = \"\", target_path: Optional[Path] = None\n) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentrender_link","title":"MDDocument.render_link","text":"<p>Show source in md_document.py:157</p> <p>Render Markdown link wih escaped title.</p>"},{"location":"handsdown/md_document/#examples_2","title":"Examples","text":"<pre><code>MDDocument.render_link('my title', 'doc.md#test')\n'[my title](doc.md#test)'\n\nMDDocument.render_link('MyClass.__init__', 'my.md')\n'[MyClass.__init__](doc.md#my.md)'\n</code></pre>"},{"location":"handsdown/md_document/#arguments_5","title":"Arguments","text":"<ul> <li>MDDocument().title - Link text.</li> <li><code>link</code> - Link target.</li> </ul>"},{"location":"handsdown/md_document/#returns_4","title":"Returns","text":"<p>A string with Markdown link.</p>"},{"location":"handsdown/md_document/#signature_8","title":"Signature","text":"<pre><code>@classmethod\ndef render_link(cls, title: str, link: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentsections","title":"MDDocument().sections","text":"<p>Show source in md_document.py:296</p> <p>All non-special <code>sections</code> of the document.</p>"},{"location":"handsdown/md_document/#signature_9","title":"Signature","text":"<pre><code>@property\ndef sections(self) -&gt; List[str]:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentsource_file_name","title":"MDDocument().source_file_name","text":"<p>Show source in md_document.py:87</p> <p>Source code file name.</p>"},{"location":"handsdown/md_document/#signature_10","title":"Signature","text":"<pre><code>@property\ndef source_file_name(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentsubtitle","title":"MDDocument().subtitle","text":"<p>Show source in md_document.py:272</p> <p>MDDocument subtitle or an empty string.</p>"},{"location":"handsdown/md_document/#signature_11","title":"Signature","text":"<pre><code>@property\ndef subtitle(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentsubtitle_1","title":"MDDocument().subtitle","text":"<p>Show source in md_document.py:279</p>"},{"location":"handsdown/md_document/#signature_12","title":"Signature","text":"<pre><code>@subtitle.setter\ndef subtitle(self, subtitle: str) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumenttitle","title":"MDDocument().title","text":"<p>Show source in md_document.py:260</p> <p>MDDocument title or an empty string.</p>"},{"location":"handsdown/md_document/#signature_13","title":"Signature","text":"<pre><code>@property\ndef title(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumenttitle_1","title":"MDDocument().title","text":"<p>Show source in md_document.py:267</p>"},{"location":"handsdown/md_document/#signature_14","title":"Signature","text":"<pre><code>@title.setter\ndef title(self, title: str) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumenttoc_section","title":"MDDocument().toc_section","text":"<p>Show source in md_document.py:284</p> <p>Document Tree of Contents section or an empty line.</p>"},{"location":"handsdown/md_document/#signature_15","title":"Signature","text":"<pre><code>@property\ndef toc_section(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumenttoc_section_1","title":"MDDocument().toc_section","text":"<p>Show source in md_document.py:291</p>"},{"location":"handsdown/md_document/#signature_16","title":"Signature","text":"<pre><code>@toc_section.setter\ndef toc_section(self, toc_section: str) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/md_document/#mddocumentwrite","title":"MDDocument().write","text":"<p>Show source in md_document.py:252</p> <p>Write MD content to MDDocument().path.</p>"},{"location":"handsdown/md_document/#signature_17","title":"Signature","text":"<pre><code>def write(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/module/","title":"Module","text":"<p>Main module entrypoint.</p> <p>Handsdown API Index / Handsdown / Module</p> <p>Auto-generated documentation for handsdown.main module.</p>"},{"location":"handsdown/ast_parser/","title":"AST Parser","text":"<p>Collection of tools for analyzing AST and also rendering it back to a valid Python code.</p>"},{"location":"handsdown/ast_parser/#usage","title":"Usage","text":"<p>Use <code>handsdown.ast_parser.node_records.ModuleRecord</code> to parse the source code.</p>"},{"location":"handsdown/ast_parser/#examples","title":"Examples","text":"<pre><code>from pathlib import Path\n\nfrom handsdown.utils.import_string import ImportString\nfrom handsdown.ast_parser.node_records import ModuleRecord\n\nsource_path = Path(\"my_module.py\")\nimport_string = ImportString(\"my_module\")\nmodule_record = ModuleRecord.create_from_source(source_path, import_string)\nmodule_record.build_children() # generate records for imports, classes, attributes\nand function in module\n\nfunction_record = module_record.function_records[0] # get the first function in module\nprint(function_record.render(allow_multiline=True)) # print function definition\nprint(function_record.return_type_hint.render()) # print function return type annotation\n</code></pre> <p>Handsdown API Index / Handsdown / AST Parser</p> <p>Auto-generated documentation for handsdown.ast_parser module.</p>"},{"location":"handsdown/ast_parser/#modules","title":"Modules","text":"<ul> <li>Analyzers</li> <li>ModuleRecordList</li> <li>Node Records</li> <li>Smart Ast</li> <li>Type Defs</li> </ul>"},{"location":"handsdown/ast_parser/module_record_list/","title":"ModuleRecordList","text":"<p>Aggregation of <code>ModuleRecord</code> objects.</p> <p>Handsdown API Index / Handsdown / AST Parser / ModuleRecordList</p> <p>Auto-generated documentation for handsdown.ast_parser.module_record_list module.</p>"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlist_1","title":"ModuleRecordList","text":"<p>Show source in module_record_list.py:11</p> <p>Aggregation of <code>ModuleRecord</code> objects.</p>"},{"location":"handsdown/ast_parser/module_record_list/#signature","title":"Signature","text":"<pre><code>class ModuleRecordList:\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlistiter","title":"ModuleRecordList().iter","text":"<p>Show source in module_record_list.py:62</p> <p>Iterate over all added <code>ModuleRecord</code> entries.</p>"},{"location":"handsdown/ast_parser/module_record_list/#yields","title":"Yields","text":"<p><code>ModuleRecord</code> entries.</p>"},{"location":"handsdown/ast_parser/module_record_list/#signature_1","title":"Signature","text":"<pre><code>def __iter__(self) -&gt; Iterator[ModuleRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/module_record_list/#see-also","title":"See also","text":"<ul> <li>ModuleRecord</li> </ul>"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlistadd","title":"ModuleRecordList().add","text":"<p>Show source in module_record_list.py:52</p> <p>Add new <code>ModuleRecord</code>.</p>"},{"location":"handsdown/ast_parser/module_record_list/#arguments","title":"Arguments","text":"<ul> <li><code>module_record</code> - A new <code>ModuleRecord</code></li> </ul>"},{"location":"handsdown/ast_parser/module_record_list/#signature_2","title":"Signature","text":"<pre><code>def add(self, module_record: ModuleRecord) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/module_record_list/#see-also_1","title":"See also","text":"<ul> <li>ModuleRecord</li> </ul>"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlistfind_module_record","title":"ModuleRecordList().find_module_record","text":"<p>Show source in module_record_list.py:21</p> <p>Find <code>ModuleRecord</code> by it's import string.</p>"},{"location":"handsdown/ast_parser/module_record_list/#arguments_1","title":"Arguments","text":"<ul> <li><code>import_string</code> - Object import string.</li> </ul>"},{"location":"handsdown/ast_parser/module_record_list/#returns","title":"Returns","text":"<p>Found <code>NodeRecord</code> instance or None.</p>"},{"location":"handsdown/ast_parser/module_record_list/#signature_3","title":"Signature","text":"<pre><code>def find_module_record(self, import_string: ImportString) -&gt; Optional[ModuleRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/module_record_list/#see-also_2","title":"See also","text":"<ul> <li>ImportString</li> <li>ModuleRecord</li> </ul>"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlistget_package_names","title":"ModuleRecordList().get_package_names","text":"<p>Show source in module_record_list.py:43</p> <p>Get top level import strings.</p>"},{"location":"handsdown/ast_parser/module_record_list/#returns_1","title":"Returns","text":"<p>A set of top level imports as strings.</p>"},{"location":"handsdown/ast_parser/module_record_list/#signature_4","title":"Signature","text":"<pre><code>def get_package_names(self) -&gt; Set[str]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/smart_ast/","title":"Smart Ast","text":"<p>Smart AST.</p> <p>Provides compatibility between AST 2 and 3.</p> <p>Handsdown API Index / Handsdown / AST Parser / Smart Ast</p> <p>Auto-generated documentation for handsdown.ast_parser.smart_ast module.</p>"},{"location":"handsdown/ast_parser/type_defs/","title":"Type Defs","text":"<p>Different AST-related types collection.</p> <p>Handsdown API Index / Handsdown / AST Parser / Type Defs</p> <p>Auto-generated documentation for handsdown.ast_parser.type_defs module.</p>"},{"location":"handsdown/ast_parser/type_defs/#attributes","title":"Attributes","text":"<ul> <li> <p><code>RenderExpr</code> - Ready for render expression: Union[NodeRecord, str]</p> </li> <li> <p><code>Node</code> - AST node or text: Union[str, ast.AST]</p> </li> <li> <p><code>ASTIterable</code> - Iterable AST types: Union[ast.List, ast.Set, ast.Tuple]</p> </li> <li> <p><code>ASTImport</code> - AST import node: Union[ast.Import, ast.ImportFrom]</p> </li> <li> <p><code>ASTFunctionDef</code> - AST import node: Union[ast.FunctionDef, ast.AsyncFunctionDef]</p> </li> </ul>"},{"location":"handsdown/ast_parser/analyzers/","title":"Analyzers","text":"<p>AST Analyzers.</p> <p>Handsdown API Index / Handsdown / AST Parser / Analyzers</p> <p>Auto-generated documentation for handsdown.ast_parser.analyzers module.</p>"},{"location":"handsdown/ast_parser/analyzers/#modules","title":"Modules","text":"<ul> <li>BaseAnalyzer</li> <li>ClassAnalyzer</li> <li>ExpressionAnalyzer</li> <li>FunctionAnalyzer</li> <li>ModuleAnalyzer</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/","title":"BaseAnalyzer","text":"<p>Base AST analyzer.</p> <p>Handsdown API Index / Handsdown / AST Parser / Analyzers / BaseAnalyzer</p> <p>Auto-generated documentation for handsdown.ast_parser.analyzers.base_analyzer module.</p>"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/#baseanalyzer_1","title":"BaseAnalyzer","text":"<p>Show source in base_analyzer.py:9</p> <p>Base AST analyzer.</p> <p>Has lists for all objects for different analyzers.</p>"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/#signature","title":"Signature","text":"<pre><code>class BaseAnalyzer(ast.NodeVisitor):\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/#baseanalyzerget_docstring","title":"BaseAnalyzer().get_docstring","text":"<p>Show source in base_analyzer.py:19</p> <p>Get docstring from node.</p>"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/#returns","title":"Returns","text":"<p>Docstring.</p>"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/#signature_1","title":"Signature","text":"<pre><code>def get_docstring(self, node: ast.AST) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/","title":"ClassAnalyzer","text":"<p>AST analyzer for <code>ast.ClassDef</code> records.</p> <p>Handsdown API Index / Handsdown / AST Parser / Analyzers / ClassAnalyzer</p> <p>Auto-generated documentation for handsdown.ast_parser.analyzers.class_analyzer module.</p>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzer_1","title":"ClassAnalyzer","text":"<p>Show source in class_analyzer.py:11</p> <p>AST analyzer for <code>ast.ClassDef</code> records.</p>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature","title":"Signature","text":"<pre><code>class ClassAnalyzer(BaseAnalyzer):\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#see-also","title":"See also","text":"<ul> <li>BaseAnalyzer</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzergeneric_visit","title":"ClassAnalyzer().generic_visit","text":"<p>Show source in class_analyzer.py:170</p> <p>Do nothing for unknown <code>ast.AST</code> nodes.</p>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_1","title":"Signature","text":"<pre><code>def generic_visit(self, node: ast.AST) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzervisit_annassign","title":"ClassAnalyzer().visit_AnnAssign","text":"<p>Show source in class_analyzer.py:141</p> <p>Parse info about class annotated attribute statements.</p> <p>Adds new <code>ast.AnnAssign</code> entry to <code>attribute_nodes</code>. Skips assignments with names starting with <code>_</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#examples","title":"Examples","text":"<pre><code>class MyClass:\n    my_attr: int\n    my_value: int = 5\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments_1","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_2","title":"Signature","text":"<pre><code>def visit_AnnAssign(self, node: ast.AnnAssign) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzervisit_assign","title":"ClassAnalyzer().visit_Assign","text":"<p>Show source in class_analyzer.py:101</p> <p>Parse info about class attribute statements.</p> <p>Adds new <code>ast.Assign</code> entry to <code>attribute_nodes</code>. Skips assignments to anything pther that a new variable. Skips multiple assignments. Skips assignments with names starting with <code>_</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#examples_1","title":"Examples","text":"<pre><code>class MyClass:\n    MY_MODULE_ATTR = \"value\"\n    my_attr = \"value\"\n\n    # these entries are skipped\n    _MY_MODULE_ATTR = \"value\"\n    multi_attr_1, multi_attr_2 = [1, 2]\n    my_object.name = \"value\"\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments_2","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_3","title":"Signature","text":"<pre><code>def visit_Assign(self, node: ast.Assign) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzervisit_asyncfunctiondef","title":"ClassAnalyzer().visit_AsyncFunctionDef","text":"<p>Show source in class_analyzer.py:83</p> <p>Parse info about class asynchronous method statements.</p> <p>Adds new <code>FunctionRecord</code> entry to <code>method_records</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#examples_2","title":"Examples","text":"<pre><code>class MyClass:\n    async def my_method(self, arg):\n        return await arg\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments_3","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_4","title":"Signature","text":"<pre><code>def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzervisit_classdef","title":"ClassAnalyzer().visit_ClassDef","text":"<p>Show source in class_analyzer.py:23</p> <p>Entrypoint for the analyzer.</p> <p>Adds new <code>ast.expr</code> entry to <code>decorator_nodes</code> for each node from <code>node.decorator_list</code>. Adds new <code>ast.expr</code> entry to <code>base_nodes</code> for each node from <code>node.bases</code>. Visits each node from <code>node.body</code> list to parse methods.</p>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#examples_3","title":"Examples","text":"<pre><code>def my_func():\n    pass\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments_4","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_5","title":"Signature","text":"<pre><code>def visit_ClassDef(self, node: ast.ClassDef) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzervisit_functiondef","title":"ClassAnalyzer().visit_FunctionDef","text":"<p>Show source in class_analyzer.py:65</p> <p>Parse info about class method statements.</p> <p>Adds new <code>FunctionRecord</code> entry to <code>method_records</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#examples_4","title":"Examples","text":"<pre><code>class MyClass:\n    def my_method(self, arg):\n        return arg\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments_5","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_6","title":"Signature","text":"<pre><code>def visit_FunctionDef(self, node: ast.FunctionDef) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/","title":"ExpressionAnalyzer","text":"<p>AST analyzer for <code>ast.expr</code> records.</p> <p>Handsdown API Index / Handsdown / AST Parser / Analyzers / ExpressionAnalyzer</p> <p>Auto-generated documentation for handsdown.ast_parser.analyzers.expression_analyzer module.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzer_1","title":"ExpressionAnalyzer","text":"<p>Show source in expression_analyzer.py:13</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#attributes","title":"Attributes","text":"<ul> <li> <p><code>UNKNOWN</code> - dummy value to replace unknown nodes and operators: '...'</p> </li> <li> <p><code>BINOP_SYMBOLS</code>: <code>Dict[Type[ast.AST], str]</code> - representation map for binary operators: {ast.Add: '+', ast.Sub: '-', ast.Mult: '', ast.Div: '/', ast.Mod: '%', ast.Pow: '*', ast.LShift: '&lt;&lt;', ast.RShift: '&gt;&gt;', ast.BitOr: '|', ast.BitXor: '^', ast.BitAnd: '&amp;', ast.FloorDiv: '//'}</p> </li> <li> <p><code>BOOLOP_SYMBOLS</code>: <code>Dict[Type[ast.AST], str]</code> - representation map for boolean operators: {ast.And: 'and', ast.Or: 'or'}</p> </li> <li> <p><code>CMPOP_SYMBOLS</code>: <code>Dict[Type[ast.AST], str]</code> - representation map for comparison operators: {ast.Eq: '==', ast.NotEq: '!=', ast.Lt: '&lt;', ast.LtE: '&lt;=', ast.Gt: '&gt;', ast.GtE: '&gt;=', ast.Is: 'is', ast.IsNot: 'is not', ast.In: 'in', ast.NotIn: 'not in'}</p> </li> <li> <p><code>UNARYOP_SYMBOLS</code>: <code>Dict[Type[ast.AST], str]</code> - representation map for unary operators: {ast.Invert: '~', ast.Not: 'not', ast.UAdd: '+', ast.USub: '-'}</p> </li> </ul> <p>AST analyzer for <code>ast.expr</code> records.</p> <p>Prepares <code>parts</code> for <code>NodeRecord.render</code> method.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature","title":"Signature","text":"<pre><code>class ExpressionAnalyzer(BaseAnalyzer):\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#see-also","title":"See also","text":"<ul> <li>BaseAnalyzer</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzer_visit_iterable","title":"ExpressionAnalyzer()._visit_iterable","text":"<p>Show source in expression_analyzer.py:181</p> <p>Parse info from an iterable node and put it to <code>parts</code>.</p> <p>Used for <code>ast.Tuple</code>, <code>ast.Subscript</code>, <code>ast.List</code>, <code>ast.Set</code></p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples","title":"Examples","text":"<pre><code>[1, 2, 3]\n{1, 2, 3}\n(1, 2, 3)\nUnion[str, bool]\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_1","title":"Signature","text":"<pre><code>def _visit_iterable(self, node: ASTIterable) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#see-also_1","title":"See also","text":"<ul> <li>ASTIterable</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzergeneric_visit","title":"ExpressionAnalyzer().generic_visit","text":"<p>Show source in expression_analyzer.py:754</p> <p>Parse info from an unknown <code>ast.AST</code> node and put <code>...</code> to <code>parts</code>.</p> <p>Logs warning with node class.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_1","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_2","title":"Signature","text":"<pre><code>def generic_visit(self, node: ast.AST) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_attribute","title":"ExpressionAnalyzer().visit_Attribute","text":"<p>Show source in expression_analyzer.py:166</p> <p>Parse info from <code>ast.Attribute</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_1","title":"Examples","text":"<pre><code>my_object.attribute\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_2","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_3","title":"Signature","text":"<pre><code>def visit_Attribute(self, node: ast.Attribute) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_await","title":"ExpressionAnalyzer().visit_Await","text":"<p>Show source in expression_analyzer.py:709</p> <p>Parse info from <code>ast.Await</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_2","title":"Examples","text":"<pre><code>await result\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_3","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_4","title":"Signature","text":"<pre><code>def visit_Await(self, node: ast.Await) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_binop","title":"ExpressionAnalyzer().visit_BinOp","text":"<p>Show source in expression_analyzer.py:367</p> <p>Parse info from <code>ast.BinOp</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_3","title":"Examples","text":"<pre><code>1 + 5\nvalue + 1\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_4","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_5","title":"Signature","text":"<pre><code>def visit_BinOp(self, node: ast.BinOp) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_boolop","title":"ExpressionAnalyzer().visit_BoolOp","text":"<p>Show source in expression_analyzer.py:388</p> <p>Parse info from <code>ast.BoolOp</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_4","title":"Examples","text":"<pre><code>value or True\na and b\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_5","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_6","title":"Signature","text":"<pre><code>def visit_BoolOp(self, node: ast.BoolOp) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_bytes","title":"ExpressionAnalyzer().visit_Bytes","text":"<p>Show source in expression_analyzer.py:85</p> <p>Parse info from <code>ast.Bytes</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_5","title":"Examples","text":"<pre><code>b\"my_string\"\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_6","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_7","title":"Signature","text":"<pre><code>def visit_Bytes(self, node: ast.Bytes) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_call","title":"ExpressionAnalyzer().visit_Call","text":"<p>Show source in expression_analyzer.py:257</p> <p>Parse info from <code>ast.Call</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_7","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_8","title":"Signature","text":"<pre><code>def visit_Call(self, node: ast.Call) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_compare","title":"ExpressionAnalyzer().visit_Compare","text":"<p>Show source in expression_analyzer.py:344</p> <p>Parse info from <code>ast.Compare</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_6","title":"Examples","text":"<pre><code>value &lt; 5\n1 &lt; weekday &lt; 7\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_8","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_9","title":"Signature","text":"<pre><code>def visit_Compare(self, node: ast.Compare) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_dict","title":"ExpressionAnalyzer().visit_Dict","text":"<p>Show source in expression_analyzer.py:326</p> <p>Parse info from <code>ast.Dict</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_9","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_10","title":"Signature","text":"<pre><code>def visit_Dict(self, node: ast.Dict) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_dictcomp","title":"ExpressionAnalyzer().visit_DictComp","text":"<p>Show source in expression_analyzer.py:618</p> <p>Parse info from <code>ast.DictComp</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_7","title":"Examples","text":"<pre><code>{k: 1 for k in range(3)}\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_10","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_11","title":"Signature","text":"<pre><code>def visit_DictComp(self, node: ast.DictComp) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_ellipsis","title":"ExpressionAnalyzer().visit_Ellipsis","text":"<p>Show source in expression_analyzer.py:525</p> <p>Parse info from <code>ast.Ellipsis</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_8","title":"Examples","text":"<pre><code>...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_11","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_12","title":"Signature","text":"<pre><code>def visit_Ellipsis(self, node: ast.ASTEllipsis) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_formattedvalue","title":"ExpressionAnalyzer().visit_FormattedValue","text":"<p>Show source in expression_analyzer.py:584</p> <p>Parse info from <code>ast.FormattedValue</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_9","title":"Examples","text":"<pre><code>f\"{formatted_value}\"\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_12","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_13","title":"Signature","text":"<pre><code>def visit_FormattedValue(self, node: ast.FormattedValue) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_generatorexp","title":"ExpressionAnalyzer().visit_GeneratorExp","text":"<p>Show source in expression_analyzer.py:674</p> <p>Parse info from <code>ast.GeneratorExp</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_10","title":"Examples","text":"<pre><code>(k + 1 for k in range(3))\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_13","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_14","title":"Signature","text":"<pre><code>def visit_GeneratorExp(self, node: ast.GeneratorExp) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_ifexp","title":"ExpressionAnalyzer().visit_IfExp","text":"<p>Show source in expression_analyzer.py:692</p> <p>Parse info from <code>ast.IfExp</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_11","title":"Examples","text":"<pre><code>5 if my_value else 6\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_14","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_15","title":"Signature","text":"<pre><code>def visit_IfExp(self, node: ast.IfExp) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_index","title":"ExpressionAnalyzer().visit_Index","text":"<p>Show source in expression_analyzer.py:508</p> <p>Parse info from <code>ast.Index</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_12","title":"Examples","text":"<pre><code>Union[str, bool]\nUnion[str]\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_15","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_16","title":"Signature","text":"<pre><code>def visit_Index(self, node: ast.Index) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_joinedstr","title":"ExpressionAnalyzer().visit_JoinedStr","text":"<p>Show source in expression_analyzer.py:562</p> <p>Parse info from <code>ast.JoinedStr</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_13","title":"Examples","text":"<pre><code>f'str: {my_string}'\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_16","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_17","title":"Signature","text":"<pre><code>def visit_JoinedStr(self, node: ast.JoinedStr) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_lambda","title":"ExpressionAnalyzer().visit_Lambda","text":"<p>Show source in expression_analyzer.py:432</p> <p>Parse info from <code>ast.Lambda</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_14","title":"Examples","text":"<pre><code>lambda x: x + 5\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_17","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_18","title":"Signature","text":"<pre><code>def visit_Lambda(self, node: ast.Lambda) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_list","title":"ExpressionAnalyzer().visit_List","text":"<p>Show source in expression_analyzer.py:212</p> <p>Parse info from <code>ast.List</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_15","title":"Examples","text":"<pre><code>[1, 2, 3]\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_18","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_19","title":"Signature","text":"<pre><code>def visit_List(self, node: ast.List) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_listcomp","title":"ExpressionAnalyzer().visit_ListComp","text":"<p>Show source in expression_analyzer.py:638</p> <p>Parse info from <code>ast.ListComp</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_16","title":"Examples","text":"<pre><code>[k + 1 for k in range(3)]\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_19","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_20","title":"Signature","text":"<pre><code>def visit_ListComp(self, node: ast.ListComp) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_name","title":"ExpressionAnalyzer().visit_Name","text":"<p>Show source in expression_analyzer.py:114</p> <p>Parse info from <code>ast.Name</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_17","title":"Examples","text":"<pre><code>my_value\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_20","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_21","title":"Signature","text":"<pre><code>def visit_Name(self, node: ast.Name) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_nameconstant","title":"ExpressionAnalyzer().visit_NameConstant","text":"<p>Show source in expression_analyzer.py:128</p> <p>Parse info from <code>ast.NameConstant</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_18","title":"Examples","text":"<pre><code>None\nTrue\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_21","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_22","title":"Signature","text":"<pre><code>def visit_NameConstant(self, node: ast.NameConstant) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_num","title":"ExpressionAnalyzer().visit_Num","text":"<p>Show source in expression_analyzer.py:99</p> <p>Parse info from <code>ast.Num</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_19","title":"Examples","text":"<pre><code>123\n123.456\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_22","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_23","title":"Signature","text":"<pre><code>def visit_Num(self, node: ast.Num) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_set","title":"ExpressionAnalyzer().visit_Set","text":"<p>Show source in expression_analyzer.py:227</p> <p>Parse info from <code>ast.Set</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_20","title":"Examples","text":"<pre><code>{1, 2, 3}\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_23","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_24","title":"Signature","text":"<pre><code>def visit_Set(self, node: ast.Set) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_setcomp","title":"ExpressionAnalyzer().visit_SetComp","text":"<p>Show source in expression_analyzer.py:656</p> <p>Parse info from <code>ast.SetComp</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_21","title":"Examples","text":"<pre><code>{k + 1 for k in range(3)}\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_24","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_25","title":"Signature","text":"<pre><code>def visit_SetComp(self, node: ast.SetComp) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_slice","title":"ExpressionAnalyzer().visit_Slice","text":"<p>Show source in expression_analyzer.py:538</p> <p>Parse info from <code>ast.Slice</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_22","title":"Examples","text":"<pre><code>[1:]\n[:2]\n[1:2]\n[1:2:-1]\n[::-1]\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_25","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_26","title":"Signature","text":"<pre><code>def visit_Slice(self, node: ast.Slice) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_starred","title":"ExpressionAnalyzer().visit_Starred","text":"<p>Show source in expression_analyzer.py:291</p> <p>Parse info from <code>ast.Starred</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_23","title":"Examples","text":"<pre><code>*arg\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_26","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_27","title":"Signature","text":"<pre><code>def visit_Starred(self, node: ast.Starred) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_str","title":"ExpressionAnalyzer().visit_Str","text":"<p>Show source in expression_analyzer.py:69</p> <p>Parse info from <code>ast.Str</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_24","title":"Examples","text":"<pre><code>\"my_string\"\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_27","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_28","title":"Signature","text":"<pre><code>def visit_Str(self, node: ast.Str) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_subscript","title":"ExpressionAnalyzer().visit_Subscript","text":"<p>Show source in expression_analyzer.py:142</p> <p>Parse info from <code>ast.Subscript</code> node and put it to <code>parts</code>.</p> <p>Type annotations are also matched by this method.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_25","title":"Examples","text":"<pre><code>Union[Name, bool]\nList[1:4]\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_28","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_29","title":"Signature","text":"<pre><code>def visit_Subscript(self, node: ast.Subscript) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_tuple","title":"ExpressionAnalyzer().visit_Tuple","text":"<p>Show source in expression_analyzer.py:242</p> <p>Parse info from <code>ast.Tuple</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_26","title":"Examples","text":"<pre><code>(1, 2, 3)\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_29","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_30","title":"Signature","text":"<pre><code>def visit_Tuple(self, node: ast.Tuple) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_unaryop","title":"ExpressionAnalyzer().visit_UnaryOp","text":"<p>Show source in expression_analyzer.py:410</p> <p>Parse info from <code>ast.UnaryOp</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_27","title":"Examples","text":"<pre><code>+5\n-12\n~1\nnot True\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_30","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_31","title":"Signature","text":"<pre><code>def visit_UnaryOp(self, node: ast.UnaryOp) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_yield","title":"ExpressionAnalyzer().visit_Yield","text":"<p>Show source in expression_analyzer.py:723</p> <p>Parse info from <code>ast.Yield</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_28","title":"Examples","text":"<pre><code>yield\nyield value\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_31","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_32","title":"Signature","text":"<pre><code>def visit_Yield(self, node: ast.Yield) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_yieldfrom","title":"ExpressionAnalyzer().visit_YieldFrom","text":"<p>Show source in expression_analyzer.py:740</p> <p>Parse info from <code>ast.YieldFrom</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_29","title":"Examples","text":"<pre><code>yield from my_generator\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_32","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_33","title":"Signature","text":"<pre><code>def visit_YieldFrom(self, node: ast.YieldFrom) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_arg","title":"ExpressionAnalyzer().visit_arg","text":"<p>Show source in expression_analyzer.py:491</p> <p>Parse info from <code>ast.arg</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_30","title":"Examples","text":"<pre><code>def my_func(arg)\ndef my_func(arg: str)\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_33","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_34","title":"Signature","text":"<pre><code>def visit_arg(self, node: ast.arg) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_arguments","title":"ExpressionAnalyzer().visit_arguments","text":"<p>Show source in expression_analyzer.py:448</p> <p>Parse info from <code>ast.arguments</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_31","title":"Examples","text":"<pre><code>def my_func(arg, *args, **kwargs)\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_34","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_35","title":"Signature","text":"<pre><code>def visit_arguments(self, node: ast.arguments) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_comprehension","title":"ExpressionAnalyzer().visit_comprehension","text":"<p>Show source in expression_analyzer.py:599</p> <p>Parse info from <code>ast.comprehension</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_32","title":"Examples","text":"<pre><code>for k in range(3) if k &gt; 0 if True\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_35","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_36","title":"Signature","text":"<pre><code>def visit_comprehension(self, node: ast.comprehension) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_keyword","title":"ExpressionAnalyzer().visit_keyword","text":"<p>Show source in expression_analyzer.py:305</p> <p>Parse info from <code>ast.keyword</code> node and put it to <code>parts</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_33","title":"Examples","text":"<pre><code>my_func(**{\"kwarg\": \"value\"})\nmy_func(kwarg=\"value\")\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_36","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_37","title":"Signature","text":"<pre><code>def visit_keyword(self, node: ast.keyword) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/","title":"FunctionAnalyzer","text":"<p>AST analyzer for <code>ast.FunctionDef</code> records.</p> <p>Handsdown API Index / Handsdown / AST Parser / Analyzers / FunctionAnalyzer</p> <p>Auto-generated documentation for handsdown.ast_parser.analyzers.function_analyzer module.</p>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzer_1","title":"FunctionAnalyzer","text":"<p>Show source in function_analyzer.py:12</p> <p>AST analyzer for <code>ast.FunctionDef</code> records.</p>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature","title":"Signature","text":"<pre><code>class FunctionAnalyzer(BaseAnalyzer):\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#see-also","title":"See also","text":"<ul> <li>BaseAnalyzer</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzergeneric_visit","title":"FunctionAnalyzer().generic_visit","text":"<p>Show source in function_analyzer.py:161</p> <p>Do nothing for unknown <code>ast.AST</code> nodes.</p>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature_1","title":"Signature","text":"<pre><code>def generic_visit(self, node: ast.AST) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzervisit_asyncfunctiondef","title":"FunctionAnalyzer().visit_AsyncFunctionDef","text":"<p>Show source in function_analyzer.py:142</p> <p>Entrypoint for the analyzer for asynchronous functions.</p> <p>Visits each node from <code>node.args</code>. Adds new <code>ast.expr</code> entry to <code>decorator_nodes</code> for each node from <code>node.decorator_list</code>. Sets <code>return_type_hint</code> to <code>node.returns</code> if it defined.</p>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#examples","title":"Examples","text":"<pre><code>async def my_func():\n    return await result\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#arguments_1","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature_2","title":"Signature","text":"<pre><code>def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzervisit_functiondef","title":"FunctionAnalyzer().visit_FunctionDef","text":"<p>Show source in function_analyzer.py:123</p> <p>Entrypoint for the analyzer.</p> <p>Visits each node from <code>node.args</code>. Adds new <code>ast.expr</code> entry to <code>decorator_nodes</code> for each node from <code>node.decorator_list</code>. Sets <code>return_type_hint</code> to <code>node.returns</code> if it defined.</p>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#examples_1","title":"Examples","text":"<pre><code>def my_func():\n    return result\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#arguments_2","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature_3","title":"Signature","text":"<pre><code>def visit_FunctionDef(self, node: ast.FunctionDef) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzervisit_arguments","title":"FunctionAnalyzer().visit_arguments","text":"<p>Show source in function_analyzer.py:38</p> <p>Parse info about class method statements.</p> <p>Adds new <code>ArgumentRecord</code> entry to <code>argument_records</code> for each argument.</p>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#examples_2","title":"Examples","text":"<pre><code># simple arguments\ndef my_func(\n    arg1,\n    arg_default=\"value\",\n    *args,\n    **kwargs,\n):\n    pass\n\n# type annotated arguments\ndef my_func_typed(\n    arg1: str,\n    arg_default: str = \"value\",\n):\n    pass\n\n# keyword-only arguments\ndef my_func_kw_only(\n    *,\n    kw_only_arg\n):\n    pass\n\n# pos-only arguments for py38\ndef my_func_kw_only(\n    pos_only_arg,\n    /\n):\n    pass\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#arguments_3","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature_4","title":"Signature","text":"<pre><code>def visit_arguments(self, node: ast.arguments) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/","title":"ModuleAnalyzer","text":"<p>AST analyzer for <code>ast.Module</code> records.</p> <p>Handsdown API Index / Handsdown / AST Parser / Analyzers / ModuleAnalyzer</p> <p>Auto-generated documentation for handsdown.ast_parser.analyzers.module_analyzer module.</p>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzer_1","title":"ModuleAnalyzer","text":"<p>Show source in module_analyzer.py:11</p> <p>AST analyzer for <code>ast.Module</code> records.</p>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature","title":"Signature","text":"<pre><code>class ModuleAnalyzer(BaseAnalyzer):\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#see-also","title":"See also","text":"<ul> <li>BaseAnalyzer</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_annassign","title":"ModuleAnalyzer().visit_AnnAssign","text":"<p>Show source in module_analyzer.py:180</p> <p>Parse info about module attribute statements.</p> <p>Adds new <code>ast.AnnAssign</code> entry to <code>attribute_nodes</code>. Skips assignments with names starting with <code>_</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples","title":"Examples","text":"<pre><code>MY_MODULE_INT: int\nMY_MODULE_ATTR: str = 'value'\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_1","title":"Signature","text":"<pre><code>def visit_AnnAssign(self, node: ast.AnnAssign) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_assign","title":"ModuleAnalyzer().visit_Assign","text":"<p>Show source in module_analyzer.py:130</p> <p>Parse info about module attribute statements.</p> <p>Adds new <code>ast.Assign</code> entry to <code>attribute_nodes</code>. Skips assignments to anything other than a new variable. Skips multiple assignments. Skips assignments with names starting with <code>_</code>. Parses <code>__all__</code> and add all values to <code>all_names</code></p>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_1","title":"Examples","text":"<pre><code>MY_MODULE_ATTR = 'value'\n    my_attr = \"value\"\n__all__ = ['MyClass', 'my_func']\n\n# these entries are skipped\n_MY_MODULE_ATTR = \"value\"\nmulti_attr_1, multi_attr_2 = [1, 2]\nmy_object.name = \"value\"\n__all__ = all_list\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_1","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_2","title":"Signature","text":"<pre><code>def visit_Assign(self, node: ast.Assign) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_asyncfunctiondef","title":"ModuleAnalyzer().visit_AsyncFunctionDef","text":"<p>Show source in module_analyzer.py:112</p> <p>Parse info about module <code>def ...</code> statements.</p> <p>Adds <code>node</code> entry to <code>function_nodes</code>. Skips nodes with names starting with <code>_</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_2","title":"Examples","text":"<pre><code>async def my_func(arg1):\n    return await arg1\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_2","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_3","title":"Signature","text":"<pre><code>def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_classdef","title":"ModuleAnalyzer().visit_ClassDef","text":"<p>Show source in module_analyzer.py:58</p> <p>Parse info about module <code>class ...</code> statements.</p> <p>Adds <code>node</code> entry to <code>class_nodes</code>. Skips nodes with names starting with <code>_</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_3","title":"Examples","text":"<pre><code>class MyClass():\n    pass\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_3","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_4","title":"Signature","text":"<pre><code>def visit_ClassDef(self, node: ast.ClassDef) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_functiondef","title":"ModuleAnalyzer().visit_FunctionDef","text":"<p>Show source in module_analyzer.py:94</p> <p>Parse info about module <code>def ...</code> statements.</p> <p>Adds <code>node</code> entry to <code>function_nodes</code>. Skips nodes with names starting with <code>_</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_4","title":"Examples","text":"<pre><code>def my_func(arg1):\n    return arg1\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_4","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_5","title":"Signature","text":"<pre><code>def visit_FunctionDef(self, node: ast.FunctionDef) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_import","title":"ModuleAnalyzer().visit_Import","text":"<p>Show source in module_analyzer.py:24</p> <p>Parse info about module <code>import ...</code> statements.</p> <p>Adds <code>node</code> to <code>import_nodes</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_5","title":"Examples","text":"<pre><code>import my_module\nimport my_module as my\nimport my_module.my_class\nimport my_module.my_class as my_class\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_5","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_6","title":"Signature","text":"<pre><code>def visit_Import(self, node: ast.Import) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_importfrom","title":"ModuleAnalyzer().visit_ImportFrom","text":"<p>Show source in module_analyzer.py:42</p> <p>Parse info about module <code>import ... from ...</code> statements.</p> <p>Adds <code>node</code> to <code>import_nodes</code>.</p>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_6","title":"Examples","text":"<pre><code>from my_module import my_class\nfrom my_module import my_class as new_class\n</code></pre>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_6","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_7","title":"Signature","text":"<pre><code>def visit_ImportFrom(self, node: ast.ImportFrom) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/","title":"Node Records","text":"<p>Wrappers for AST nodes.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records module.</p>"},{"location":"handsdown/ast_parser/node_records/#modules","title":"Modules","text":"<ul> <li>ArgumentRecord</li> <li>AttributeRecord</li> <li>ClassRecord</li> <li>ExpressionRecord</li> <li>FunctionRecord</li> <li>ImportRecord</li> <li>ModuleRecord</li> <li>NodeRecord</li> <li>TextRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/argument_record/","title":"ArgumentRecord","text":"<p>Wrapper for an <code>ast.arg</code> node.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records / ArgumentRecord</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records.argument_record module.</p>"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecord_1","title":"ArgumentRecord","text":"<p>Show source in argument_record.py:13</p> <p>Wrapper for an <code>ast.arg</code> node.</p>"},{"location":"handsdown/ast_parser/node_records/argument_record/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> <li><code>name</code> - Argument name.</li> <li><code>type_hint</code> - Argument type hint.</li> <li><code>prefix</code> - Prefix for arguemnt name, used for starargs.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature","title":"Signature","text":"<pre><code>class ArgumentRecord(NodeRecord):\n    def __init__(\n        self,\n        node: ast.arg,\n        name: str,\n        type_hint: Optional[ast.expr] = None,\n        prefix: str = \"\",\n    ) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/argument_record/#see-also","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecorddefault","title":"ArgumentRecord().default","text":"<p>Show source in argument_record.py:39</p> <p>Default value of the argument.</p>"},{"location":"handsdown/ast_parser/node_records/argument_record/#returns","title":"Returns","text":"<p>Default exression or None.</p>"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature_1","title":"Signature","text":"<pre><code>@property\ndef default(self) -&gt; Optional[ExpressionRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/argument_record/#see-also_1","title":"See also","text":"<ul> <li>ExpressionRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecordrelated_names","title":"ArgumentRecord().related_names","text":"<p>Show source in argument_record.py:71</p> <p>Set of related names.</p>"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature_2","title":"Signature","text":"<pre><code>@property\ndef related_names(self) -&gt; Set[str]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecordrequired","title":"ArgumentRecord().required","text":"<p>Show source in argument_record.py:49</p> <p>Whether the argument is required.</p>"},{"location":"handsdown/ast_parser/node_records/argument_record/#returns_1","title":"Returns","text":"<p>True if required, False otherwise.</p>"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature_3","title":"Signature","text":"<pre><code>@property\ndef required(self) -&gt; bool:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecordset_default","title":"ArgumentRecord().set_default","text":"<p>Show source in argument_record.py:59</p> <p>Set default expression from test or <code>ast.AST</code> node.</p>"},{"location":"handsdown/ast_parser/node_records/argument_record/#arguments_1","title":"Arguments","text":"<ul> <li><code>node</code> - Text or AST node.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature_4","title":"Signature","text":"<pre><code>def set_default(self, node: Node) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/argument_record/#see-also_2","title":"See also","text":"<ul> <li>Node</li> </ul>"},{"location":"handsdown/ast_parser/node_records/attribute_record/","title":"AttributeRecord","text":"<p>Wrapper for an <code>ast.Assign</code> node of a module or class attribute.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records / AttributeRecord</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records.attribute_record module.</p>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#attributerecord_1","title":"AttributeRecord","text":"<p>Show source in attribute_record.py:12</p> <p>Wrapper for an <code>ast.Assign</code> node of a module or class attribute.</p>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#signature","title":"Signature","text":"<pre><code>class AttributeRecord(NodeRecord):\n    def __init__(self, node: Union[ast.Assign, ast.AnnAssign]) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#see-also","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#attributerecordappend_to","title":"AttributeRecord().append_to","text":"<p>Show source in attribute_record.py:69</p> <p>Append AttributeRecord to NodeRecord.</p>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#signature_1","title":"Signature","text":"<pre><code>def append_to(self, node_record: NodeRecord) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#see-also_1","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#attributerecordrelated_names","title":"AttributeRecord().related_names","text":"<p>Show source in attribute_record.py:32</p> <p>Set of related names.</p>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#signature_2","title":"Signature","text":"<pre><code>@property\ndef related_names(self) -&gt; Set[str]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#attributerecordrender","title":"AttributeRecord().render","text":"<p>Show source in attribute_record.py:55</p> <p>Render attribute with docstring.</p>"},{"location":"handsdown/ast_parser/node_records/attribute_record/#signature_3","title":"Signature","text":"<pre><code>def render(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/class_record/","title":"ClassRecord","text":"<p>Wrapper for an <code>ast.ClassDef</code> node.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records / ClassRecord</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records.class_record module.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecord_1","title":"ClassRecord","text":"<p>Show source in class_record.py:16</p> <p>Wrapper for an <code>ast.ClassDef</code> node.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/class_record/#signature","title":"Signature","text":"<pre><code>class ClassRecord(NodeRecord):\n    def __init__(self, node: ast.ClassDef) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/class_record/#see-also","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecordfind_record","title":"ClassRecord().find_record","text":"<p>Show source in class_record.py:34</p> <p>Find child method or attribute record.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#arguments_1","title":"Arguments","text":"<ul> <li><code>name</code> - Record name to lookup.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/class_record/#returns","title":"Returns","text":"<p>Itself or None.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_1","title":"Signature","text":"<pre><code>def find_record(self, name: str) -&gt; Optional[NodeRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/class_record/#see-also_1","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecordget_public_methods","title":"ClassRecord().get_public_methods","text":"<p>Show source in class_record.py:87</p> <p>Get Class public methods.</p> <p>Skips methods with names starting with <code>_</code> and magic methods  <code>__</code> if they have no docstring. Method <code>__init__</code> is always skipped.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#returns_1","title":"Returns","text":"<p>A list of child records.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_2","title":"Signature","text":"<pre><code>def get_public_methods(self) -&gt; List[FunctionRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/class_record/#see-also_2","title":"See also","text":"<ul> <li>FunctionRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecordinit_method","title":"ClassRecord().init_method","text":"<p>Show source in class_record.py:126</p> <p>Get the <code>__init__</code> method.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_3","title":"Signature","text":"<pre><code>@property\ndef init_method(self) -&gt; Optional[FunctionRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/class_record/#see-also_3","title":"See also","text":"<ul> <li>FunctionRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecorditer_records","title":"ClassRecord().iter_records","text":"<p>Show source in class_record.py:74</p> <p>Iterate over Class public methods.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#yields","title":"Yields","text":"<p>A child record.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_4","title":"Signature","text":"<pre><code>def iter_records(self) -&gt; Iterator[NodeRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/class_record/#see-also_4","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecordrelated_names","title":"ClassRecord().related_names","text":"<p>Show source in class_record.py:57</p> <p>Set of related names.</p>"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_5","title":"Signature","text":"<pre><code>@property\ndef related_names(self) -&gt; Set[str]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/expression_record/","title":"ExpressionRecord","text":"<p>Wrapper for an <code>ast.expr</code> node.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records / ExpressionRecord</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records.expression_record module.</p>"},{"location":"handsdown/ast_parser/node_records/expression_record/#expressionrecord_1","title":"ExpressionRecord","text":"<p>Show source in expression_record.py:13</p> <p>Wrapper for an <code>ast.expr</code> node.</p>"},{"location":"handsdown/ast_parser/node_records/expression_record/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/expression_record/#signature","title":"Signature","text":"<pre><code>class ExpressionRecord(NodeRecord):\n    def __init__(self, node: ast.AST) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/expression_record/#see-also","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/expression_record/#expressionrecordrelated_names","title":"ExpressionRecord().related_names","text":"<p>Show source in expression_record.py:28</p> <p>Set of related names.</p>"},{"location":"handsdown/ast_parser/node_records/expression_record/#signature_1","title":"Signature","text":"<pre><code>@property\ndef related_names(self) -&gt; Set[str]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/expression_record/#expressionrecordrender_str","title":"ExpressionRecord().render_str","text":"<p>Show source in expression_record.py:54</p> <p>Render expression to a string.</p>"},{"location":"handsdown/ast_parser/node_records/expression_record/#signature_2","title":"Signature","text":"<pre><code>def render_str(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/function_record/","title":"FunctionRecord","text":"<p>Wrapper for an <code>ast.FunctionDef</code> node.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records / FunctionRecord</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records.function_record module.</p>"},{"location":"handsdown/ast_parser/node_records/function_record/#functionrecord_1","title":"FunctionRecord","text":"<p>Show source in function_record.py:16</p> <p>Wrapper for an <code>ast.FunctionDef</code> and <code>ast.AsyncFunctionDef</code> node.</p>"},{"location":"handsdown/ast_parser/node_records/function_record/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/function_record/#signature","title":"Signature","text":"<pre><code>class FunctionRecord(NodeRecord):\n    def __init__(self, node: ASTFunctionDef, is_method: bool) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/function_record/#see-also","title":"See also","text":"<ul> <li>ASTFunctionDef</li> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/function_record/#functionrecordis_init","title":"FunctionRecord().is_init","text":"<p>Show source in function_record.py:140</p> <p>Returns True if function is an init method.</p>"},{"location":"handsdown/ast_parser/node_records/function_record/#signature_1","title":"Signature","text":"<pre><code>def is_init(self) -&gt; bool:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/function_record/#functionrecordparse_type_comments","title":"FunctionRecord().parse_type_comments","text":"<p>Show source in function_record.py:97</p> <p>Extract comment type annotations from a function definiition lines.</p> <p>Sets <code>arguments_record</code> to a new <code>TextRecord</code> for each found type annotaiton. Also sets <code>return_type_hint</code> to a <code>TextRecord</code> if function return type found.</p>"},{"location":"handsdown/ast_parser/node_records/function_record/#signature_2","title":"Signature","text":"<pre><code>def parse_type_comments(self, lines: Iterable[str]) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/function_record/#functionrecordrelated_names","title":"FunctionRecord().related_names","text":"<p>Show source in function_record.py:40</p> <p>Set of related names.</p>"},{"location":"handsdown/ast_parser/node_records/function_record/#signature_3","title":"Signature","text":"<pre><code>@property\ndef related_names(self) -&gt; Set[str]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/import_record/","title":"ImportRecord","text":"<p>Wrapper for an <code>ast.Import</code> and <code>ast.ImportFrom</code> nodes.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records / ImportRecord</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records.import_record module.</p>"},{"location":"handsdown/ast_parser/node_records/import_record/#importrecord_1","title":"ImportRecord","text":"<p>Show source in import_record.py:12</p> <p>Wrapper for an <code>ast.Import</code> and <code>ast.ImportFrom</code> nodes.</p>"},{"location":"handsdown/ast_parser/node_records/import_record/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - AST node.</li> <li><code>alias</code> - AST node with import alias.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/import_record/#signature","title":"Signature","text":"<pre><code>class ImportRecord(NodeRecord):\n    def __init__(self, node: ASTImport, alias: ast.alias) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/import_record/#see-also","title":"See also","text":"<ul> <li>ASTImport</li> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/import_record/#importrecordget_import_string","title":"ImportRecord().get_import_string","text":"<p>Show source in import_record.py:32</p> <p>Get import string from a node.</p>"},{"location":"handsdown/ast_parser/node_records/import_record/#returns","title":"Returns","text":"<p>An absolute import string.</p>"},{"location":"handsdown/ast_parser/node_records/import_record/#signature_1","title":"Signature","text":"<pre><code>def get_import_string(self) -&gt; ImportString:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/import_record/#see-also_1","title":"See also","text":"<ul> <li>ImportString</li> </ul>"},{"location":"handsdown/ast_parser/node_records/import_record/#importrecordmatch","title":"ImportRecord().match","text":"<p>Show source in import_record.py:55</p> <p>Check if <code>name</code> matches or stats with a local name.</p>"},{"location":"handsdown/ast_parser/node_records/import_record/#examples","title":"Examples","text":"<pre><code>import_node = ast.parse('from my_module import Name as LocalName')\nimport_record = ImportRecord(import_node)\n\nimport_record.match('LocalName')\nTrue\n\nimport_record.match('LocalName.child')\nTrue\n\nimport_record.match('OtherName')\nFalse\n\nimport_record.match('LocalNameOther')\nFalse\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/import_record/#returns_1","title":"Returns","text":"<p>True if name is imported object itself on one of his children.</p>"},{"location":"handsdown/ast_parser/node_records/import_record/#signature_2","title":"Signature","text":"<pre><code>def match(self, name: str) -&gt; Optional[ImportString]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/import_record/#see-also_2","title":"See also","text":"<ul> <li>ImportString</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/","title":"ModuleRecord","text":"<p>Wrapper for an <code>ast.Module</code> node with corresponding node info.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records / ModuleRecord</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records.module_record module.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecord_1","title":"ModuleRecord","text":"<p>Show source in module_record.py:20</p> <p>Wrapper for an <code>ast.Module</code> node with corresponding node info.</p> <p>Responsible for parsing Python source as well.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - Result of <code>ast.parse</code>.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#signature","title":"Signature","text":"<pre><code>class ModuleRecord(NodeRecord):\n    def __init__(self, node: ast.Module) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecord_get_comment_docstring","title":"ModuleRecord()._get_comment_docstring","text":"<p>Show source in module_record.py:218</p> <p>Get comment docstring preceding the object from the source code.</p> <p>Returns only lines starting with <code>#</code>, lines joined with a single space.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#arguments_1","title":"Arguments","text":"<ul> <li><code>node_record</code> - Node record for source lookup.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#returns","title":"Returns","text":"<p>A docstring as a string.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_1","title":"Signature","text":"<pre><code>def _get_comment_docstring(self, node_record: NodeRecord) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also_1","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecord_get_function_def_lines","title":"ModuleRecord()._get_function_def_lines","text":"<p>Show source in module_record.py:195</p> <p>Get all function definition lines for comment type hints lookup.</p> <p>Removes indentation.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#arguments_2","title":"Arguments","text":"<ul> <li><code>function_record</code> - Function record for source lookup.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#returns_1","title":"Returns","text":"<p>Function definition lines as an array.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_2","title":"Signature","text":"<pre><code>def _get_function_def_lines(self, function_record: FunctionRecord) -&gt; List[str]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also_2","title":"See also","text":"<ul> <li>FunctionRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordbuild_children","title":"ModuleRecord().build_children","text":"<p>Show source in module_record.py:136</p> <p>Collect full information about Module child records.</p> <p>Used only when doc for this ModuleRecord is building.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_3","title":"Signature","text":"<pre><code>def build_children(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordcreate_from_source","title":"ModuleRecord.create_from_source","text":"<p>Show source in module_record.py:44</p> <p>Create new ModuleRecord from path.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#arguments_3","title":"Arguments","text":"<ul> <li><code>source_path</code> - Path to a Python source file.</li> <li><code>import_string</code> - File absolute import string.</li> <li><code>encoding</code> - File encoding.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#returns_2","title":"Returns","text":"<p>New ModuleRecord instance.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_4","title":"Signature","text":"<pre><code>@classmethod\ndef create_from_source(\n    cls, source_path: Path, import_string: ImportString, encoding: str = ENCODING\n) -&gt; \"ModuleRecord\":\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also_3","title":"See also","text":"<ul> <li>ENCODING</li> <li>ImportString</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordfind_record","title":"ModuleRecord().find_record","text":"<p>Show source in module_record.py:72</p> <p>Find child in the Module by an absolute or relative import string.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#attributes","title":"Attributes","text":"<ul> <li><code>import_string</code> - record import string.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#returns_3","title":"Returns","text":"<p>Found child record on None.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_5","title":"Signature","text":"<pre><code>def find_record(self, import_string: ImportString) -&gt; Optional[NodeRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also_4","title":"See also","text":"<ul> <li>ImportString</li> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordget_related_import_strings","title":"ModuleRecord().get_related_import_strings","text":"<p>Show source in module_record.py:250</p> <p>Get a set of <code>related_names</code> found in module class, function, method and attribute records.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#returns_4","title":"Returns","text":"<p>A set of absolute import strings found.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_6","title":"Signature","text":"<pre><code>def get_related_import_strings(self, node_record: NodeRecord) -&gt; Set[ImportString]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also_5","title":"See also","text":"<ul> <li>ImportString</li> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordis_init","title":"ModuleRecord().is_init","text":"<p>Show source in module_record.py:280</p> <p>Check if this module is the init.py file.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#returns_5","title":"Returns","text":"<p>True if this module is the init.py file.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_7","title":"Signature","text":"<pre><code>def is_init(self) -&gt; bool:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecorditer_records","title":"ModuleRecord().iter_records","text":"<p>Show source in module_record.py:91</p> <p>Iterate over Module class, method and fucntion records.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#yields","title":"Yields","text":"<p>A child record.</p>"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_8","title":"Signature","text":"<pre><code>def iter_records(self) -&gt; Iterator[NodeRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also_6","title":"See also","text":"<ul> <li>NodeRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/node_record/","title":"NodeRecord","text":"<p>Base class for all node records.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records / NodeRecord</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records.node_record module.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecord_1","title":"NodeRecord","text":"<p>Show source in node_record.py:13</p> <p>Base class for all node records.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#signature","title":"Signature","text":"<pre><code>class NodeRecord:\n    def __init__(self, node: ast.AST) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordclass_name","title":"NodeRecord().class_name","text":"<p>Show source in node_record.py:156</p> <p>Record class name.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_1","title":"Signature","text":"<pre><code>@property\ndef class_name(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordget_documented_attribute_strings","title":"NodeRecord().get_documented_attribute_strings","text":"<p>Show source in node_record.py:138</p> <p>Render each of <code>attribute_records</code> to a Markdown string.</p> <p>Includes <code>name</code>, <code>docstring</code> and <code>value</code> of an <code>ArgumentRecord</code>.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#returns","title":"Returns","text":"<p>A list of rendered strings.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_2","title":"Signature","text":"<pre><code>def get_documented_attribute_strings(self) -&gt; List[str]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordline_number","title":"NodeRecord().line_number","text":"<p>Show source in node_record.py:32</p> <p>Return node line number in source.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#returns_1","title":"Returns","text":"<p>A line number startign with 1.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_3","title":"Signature","text":"<pre><code>@property\ndef line_number(self) -&gt; int:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordline_number_1","title":"NodeRecord().line_number","text":"<p>Show source in node_record.py:47</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_4","title":"Signature","text":"<pre><code>@line_number.setter\ndef line_number(self, value: int) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordparse","title":"NodeRecord().parse","text":"<p>Show source in node_record.py:84</p> <p>Get all information from a node.</p> <p>Executes only once if called multiple times.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_5","title":"Signature","text":"<pre><code>def parse(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordrelated_names","title":"NodeRecord().related_names","text":"<p>Show source in node_record.py:68</p> <p>Get a set of referenced object names in <code>node</code>.</p> <p>Returns an empty set, should be overriden by a child class.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#returns_2","title":"Returns","text":"<p>A set of referenced object name.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_6","title":"Signature","text":"<pre><code>@property\ndef related_names(self) -&gt; Set[str]:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordrender","title":"NodeRecord().render","text":"<p>Show source in node_record.py:108</p> <p>Render node to a string.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#returns_3","title":"Returns","text":"<p>A string representation of <code>node</code>.</p>"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_7","title":"Signature","text":"<pre><code>def render(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/text_record/","title":"TextRecord","text":"<p>Wrapper for a text-only <code>ast.expr</code> node.</p> <p>Handsdown API Index / Handsdown / AST Parser / Node Records / TextRecord</p> <p>Auto-generated documentation for handsdown.ast_parser.node_records.text_record module.</p>"},{"location":"handsdown/ast_parser/node_records/text_record/#textrecord_1","title":"TextRecord","text":"<p>Show source in text_record.py:12</p> <p>Wrapper for a text-only <code>ast.expr</code> node.</p>"},{"location":"handsdown/ast_parser/node_records/text_record/#arguments","title":"Arguments","text":"<ul> <li><code>node</code> - Related AST node.</li> <li><code>text</code> - Text to represent it.</li> </ul>"},{"location":"handsdown/ast_parser/node_records/text_record/#signature","title":"Signature","text":"<pre><code>class TextRecord(ExpressionRecord):\n    def __init__(self, node: ast.AST, text: str) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/text_record/#see-also","title":"See also","text":"<ul> <li>ExpressionRecord</li> </ul>"},{"location":"handsdown/ast_parser/node_records/text_record/#textrecordrelated_names","title":"TextRecord().related_names","text":"<p>Show source in text_record.py:28</p> <p>A list of fake <code>ast.Name.id</code> records inside the node.</p>"},{"location":"handsdown/ast_parser/node_records/text_record/#examples","title":"Examples","text":"<pre><code>TextRecord(ast_node, 'Union[str, MyClass]').related_names\n{'Union', 'str', 'MyClass'}\n</code></pre>"},{"location":"handsdown/ast_parser/node_records/text_record/#returns","title":"Returns","text":"<p>A set of related names.</p>"},{"location":"handsdown/ast_parser/node_records/text_record/#signature_1","title":"Signature","text":"<pre><code>@property\ndef related_names(self) -&gt; Set[str]:\n    ...\n</code></pre>"},{"location":"handsdown/generators/","title":"Generators","text":"<p>Handsdown API Index / Handsdown / Generators</p> <p>Auto-generated documentation for handsdown.generators module.</p>"},{"location":"handsdown/generators/#modules","title":"Modules","text":"<ul> <li>Base</li> <li>Material</li> <li>Rtd</li> </ul>"},{"location":"handsdown/generators/base/","title":"Base","text":"<p>Main handsdown documentation generator.</p> <p>Handsdown API Index / Handsdown / Generators / Base</p> <p>Auto-generated documentation for handsdown.generators.base module.</p>"},{"location":"handsdown/generators/base/#basegenerator","title":"BaseGenerator","text":"<p>Show source in base.py:27</p>"},{"location":"handsdown/generators/base/#attributes","title":"Attributes","text":"<ul> <li> <p><code>INDEX_NAME</code> - Index filename: 'README.md'</p> </li> <li> <p><code>INDEX_TITLE</code> - Index title: 'Index'</p> </li> <li> <p><code>insert_toc</code> - Whether to add ToC to generated module docs: False</p> </li> </ul> <p>Base documentation generator.</p>"},{"location":"handsdown/generators/base/#arguments","title":"Arguments","text":"<ul> <li><code>project_name</code> - Name of the project.</li> <li><code>input_path</code> - Path to repo to generate docs.</li> <li><code>output_path</code> - Path to folder with auto-generated docs to output.</li> <li><code>source_paths</code> - List of paths to source files for generation.</li> <li><code>docstring_processor</code> - Docstring converter to Markdown.</li> <li><code>loader</code> - Loader for python modules.</li> <li><code>raise_errors</code> - Raise <code>LoaderError</code> instead of silencing in.</li> <li><code>source_code_url</code> - URL to source files to use instead of relative paths,     useful for GitHub Pages.</li> <li><code>source_code_path</code> - Path to local source code</li> <li><code>toc_depth</code> - Maximum depth of child modules ToC</li> <li><code>encoding</code> - File encoding</li> </ul>"},{"location":"handsdown/generators/base/#signature","title":"Signature","text":"<pre><code>class BaseGenerator:\n    def __init__(\n        self,\n        input_path: Path,\n        output_path: Path,\n        source_paths: Iterable[Path],\n        project_name: Optional[str] = None,\n        docstring_processor: Optional[BaseDocstringProcessor] = None,\n        loader: Optional[Loader] = None,\n        raise_errors: bool = False,\n        source_code_url: Optional[str] = None,\n        source_code_path: Optional[Path] = None,\n        toc_depth: int = 1,\n        encoding: str = ENCODING,\n    ) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/generators/base/#see-also","title":"See also","text":"<ul> <li>BaseDocstringProcessor</li> <li>ENCODING</li> <li>Loader</li> </ul>"},{"location":"handsdown/generators/base/#basegenerator_write_changed","title":"BaseGenerator()._write_changed","text":"<p>Show source in base.py:392</p> <p>Write content to file if it's changed.</p>"},{"location":"handsdown/generators/base/#signature_1","title":"Signature","text":"<pre><code>def _write_changed(self, path: Path, content: str) -&gt; bool:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#basegeneratorcleanup_old_docs","title":"BaseGenerator().cleanup_old_docs","text":"<p>Show source in base.py:141</p> <p>Remove old docs generated for this module.</p>"},{"location":"handsdown/generators/base/#signature_2","title":"Signature","text":"<pre><code>def cleanup_old_docs(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#basegeneratorgenerate_doc","title":"BaseGenerator().generate_doc","text":"<p>Show source in base.py:171</p> <p>Generate one module doc at once.</p>"},{"location":"handsdown/generators/base/#arguments_1","title":"Arguments","text":"<ul> <li><code>source_path</code> - Path to source file.</li> </ul>"},{"location":"handsdown/generators/base/#raises","title":"Raises","text":"<ul> <li><code>GeneratorError</code> - If <code>source_path</code> not found in current repo.</li> </ul>"},{"location":"handsdown/generators/base/#signature_3","title":"Signature","text":"<pre><code>def generate_doc(self, source_path: Path) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#basegeneratorgenerate_docs","title":"BaseGenerator().generate_docs","text":"<p>Show source in base.py:241</p> <p>Generate all doc files at once.</p>"},{"location":"handsdown/generators/base/#signature_4","title":"Signature","text":"<pre><code>def generate_docs(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#basegeneratorgenerate_external_configs","title":"BaseGenerator().generate_external_configs","text":"<p>Show source in base.py:403</p>"},{"location":"handsdown/generators/base/#signature_5","title":"Signature","text":"<pre><code>def generate_external_configs(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#basegeneratorgenerate_index","title":"BaseGenerator().generate_index","text":"<p>Show source in base.py:252</p> <p>Generate <code>&lt;output&gt;/README.md</code> file.</p> <p>Contains a Tree of all modules in the project.</p>"},{"location":"handsdown/generators/base/#signature_6","title":"Signature","text":"<pre><code>def generate_index(self) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#basegeneratorget_children_module_records","title":"BaseGenerator().get_children_module_records","text":"<p>Show source in base.py:415</p> <p>Get all module records that are children of this module.</p>"},{"location":"handsdown/generators/base/#signature_7","title":"Signature","text":"<pre><code>def get_children_module_records(self, parent: ModuleRecord) -&gt; List[ModuleRecord]:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#see-also_1","title":"See also","text":"<ul> <li>ModuleRecord</li> </ul>"},{"location":"handsdown/generators/base/#basegeneratorget_external_configs_templates","title":"BaseGenerator().get_external_configs_templates","text":"<p>Show source in base.py:364</p> <p>Get a tuple with pairs of template path to project path</p>"},{"location":"handsdown/generators/base/#signature_8","title":"Signature","text":"<pre><code>def get_external_configs_templates(self) -&gt; Tuple[Tuple[Path, Path], ...]:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#basegeneratorget_md_document","title":"BaseGenerator().get_md_document","text":"<p>Show source in base.py:199</p> <p>Get or create MDDocument for module record.</p>"},{"location":"handsdown/generators/base/#signature_9","title":"Signature","text":"<pre><code>def get_md_document(self, module_record: ModuleRecord) -&gt; MDDocument:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#see-also_2","title":"See also","text":"<ul> <li>MDDocument</li> <li>ModuleRecord</li> </ul>"},{"location":"handsdown/generators/base/#basegeneratorget_see_also_links","title":"BaseGenerator().get_see_also_links","text":"<p>Show source in base.py:329</p> <p>Get links to other modules that are referenced in the docstring.</p>"},{"location":"handsdown/generators/base/#signature_10","title":"Signature","text":"<pre><code>def get_see_also_links(\n    self, record: NodeRecord, module_record: ModuleRecord, md_document: MDDocument\n) -&gt; List[str]:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#see-also_3","title":"See also","text":"<ul> <li>MDDocument</li> <li>ModuleRecord</li> <li>NodeRecord</li> </ul>"},{"location":"handsdown/generators/base/#basegeneratorreplace_links","title":"BaseGenerator().replace_links","text":"<p>Show source in base.py:270</p>"},{"location":"handsdown/generators/base/#signature_11","title":"Signature","text":"<pre><code>def replace_links(\n    self,\n    module_record: ModuleRecord,\n    record: NodeRecord,\n    md_document: MDDocument,\n    docstring: str,\n) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/generators/base/#see-also_4","title":"See also","text":"<ul> <li>MDDocument</li> <li>ModuleRecord</li> <li>NodeRecord</li> </ul>"},{"location":"handsdown/generators/material/","title":"Material","text":"<p>Read the Docs documentation generator.</p> <p>Handsdown API Index / Handsdown / Generators / Material</p> <p>Auto-generated documentation for handsdown.generators.material module.</p>"},{"location":"handsdown/generators/material/#materialgenerator","title":"MaterialGenerator","text":"<p>Show source in material.py:10</p> <p>Read the Docs documentation generator.</p>"},{"location":"handsdown/generators/material/#signature","title":"Signature","text":"<pre><code>class MaterialGenerator(BaseGenerator):\n    ...\n</code></pre>"},{"location":"handsdown/generators/material/#see-also","title":"See also","text":"<ul> <li>BaseGenerator</li> </ul>"},{"location":"handsdown/generators/material/#materialgeneratorget_external_configs_templates","title":"MaterialGenerator().get_external_configs_templates","text":"<p>Show source in material.py:20</p> <p>Get a tuple with pairs of template path to project path</p>"},{"location":"handsdown/generators/material/#signature_1","title":"Signature","text":"<pre><code>def get_external_configs_templates(self) -&gt; Tuple[Tuple[Path, Path], ...]:\n    ...\n</code></pre>"},{"location":"handsdown/generators/rtd/","title":"Rtd","text":"<p>Read the Docs documentation generator.</p> <p>Handsdown API Index / Handsdown / Generators / Rtd</p> <p>Auto-generated documentation for handsdown.generators.rtd module.</p>"},{"location":"handsdown/generators/rtd/#rtdgenerator","title":"RTDGenerator","text":"<p>Show source in rtd.py:9</p> <p>Read the Docs documentation generator.</p>"},{"location":"handsdown/generators/rtd/#signature","title":"Signature","text":"<pre><code>class RTDGenerator(BaseGenerator):\n    ...\n</code></pre>"},{"location":"handsdown/generators/rtd/#see-also","title":"See also","text":"<ul> <li>BaseGenerator</li> </ul>"},{"location":"handsdown/processors/","title":"Processors","text":"<p>Docstrings processors.</p> <ul> <li><code>handsdown.processors.pep257.PEP257DocstringProcessor</code></li> <li><code>handsdown.processors.rst.RSTDocstringProcessor</code></li> </ul> <p>Handsdown API Index / Handsdown / Processors</p> <p>Auto-generated documentation for handsdown.processors module.</p>"},{"location":"handsdown/processors/#modules","title":"Modules","text":"<ul> <li>Base Docstring Processor</li> <li>PEP 257 Docstring Processor</li> <li>reStructuredText Docstring Processor</li> <li>Section</li> <li>SectionBlock</li> <li>SectionMap</li> <li>Smart</li> </ul>"},{"location":"handsdown/processors/base/","title":"Base Docstring Processor","text":"<p>Base class for all docstring processors:</p>"},{"location":"handsdown/processors/base/#links","title":"Links","text":"<ul> <li><code>handsdown.processors.pep257.PEP257DocstringProcessor</code></li> <li><code>handsdown.processors.rst.RSTDocstringProcessor</code></li> <li><code>handsdown.processors.smart.SmartDocstringProcessor</code></li> </ul>"},{"location":"handsdown/processors/base/#supported-features","title":"Supported features","text":"<ul> <li><code>&lt;triple_backticks&gt;&lt;?language&gt;</code> starts a new Markdown-style code block,   ended with triple backticks</li> <li><code>&lt;line&gt;::</code> starts a new Markdown-style Python code block, ended with unindent</li> <li><code>&lt;triple_tildes&gt;&lt;?language&gt;</code> starts a new Markdown-style block, ends with <code>&lt;triple_tildes&gt;</code></li> <li><code>&gt;&gt;&gt;</code> starts a new Markdown-style Python block, ended with unindent   or line not starting with <code>&gt;&gt;&gt;</code> or <code>...</code></li> </ul> <p>Handsdown API Index / Handsdown / Processors / Base Docstring Processor</p> <p>Auto-generated documentation for handsdown.processors.base module.</p>"},{"location":"handsdown/processors/base/#basedocstringprocessor","title":"BaseDocstringProcessor","text":"<p>Show source in base.py:28</p> <p>Base docstring processor. All docstring processors are based on top of it.</p>"},{"location":"handsdown/processors/base/#attributes","title":"Attributes","text":"<ul> <li><code>line_re_map</code> - Mapping of line regexp to format string for it</li> <li><code>section_name_map</code> - Mapping of Section search key to Section title</li> <li><code>replace_map</code> - Mapping of string to replace to replacer</li> </ul>"},{"location":"handsdown/processors/base/#signature","title":"Signature","text":"<pre><code>class BaseDocstringProcessor:\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/processors/base/#basedocstringprocessorbuild_sections","title":"BaseDocstringProcessor().build_sections","text":"<p>Show source in base.py:66</p> <p>Parse docstring and split it to sections with arrays of strings.</p>"},{"location":"handsdown/processors/base/#arguments","title":"Arguments","text":"<ul> <li><code>content</code> - Object docstring.</li> </ul>"},{"location":"handsdown/processors/base/#returns","title":"Returns","text":"<p>A dictionary where key is a section name and value is a list of string sof this section.</p>"},{"location":"handsdown/processors/base/#signature_1","title":"Signature","text":"<pre><code>def build_sections(self, content: str) -&gt; SectionMap:\n    ...\n</code></pre>"},{"location":"handsdown/processors/base/#see-also","title":"See also","text":"<ul> <li>SectionMap</li> </ul>"},{"location":"handsdown/processors/pep257/","title":"PEP 257 Docstring Processor","text":"<p>Docstring processor for PEP 257 and Google docstring format.</p>"},{"location":"handsdown/processors/pep257/#links","title":"Links","text":"<ul> <li>Supported section names</li> </ul>"},{"location":"handsdown/processors/pep257/#supported-features","title":"Supported features","text":"<ul> <li><code>&lt;known_section&gt;:</code> starts a new section <code>&lt;known_section&gt;</code></li> <li><code>&lt;name&gt;: &lt;description&gt;</code> formatted in Markdown style and added to named sections</li> <li><code>&lt;name&gt; (&lt;?type&gt;): &lt;description&gt;</code> formatted in Markdown style and added to named sections</li> <li><code>&lt;name&gt; (&lt;?type&gt;,optonal): &lt;description&gt;</code> formatted in Markdown   style and added to named sections</li> <li><code>&lt;name&gt; -- &lt;description&gt;</code> formatted in Markdown style and   added to named sections</li> <li><code>&lt;name&gt; {&lt;type&gt;} -- &lt;description&gt;</code> formatted in Markdown style and added to named sections</li> <li><code>&lt;name&gt; {[&lt;type&gt;]} -- &lt;description&gt;</code> formatted in Markdown style and added to named sections</li> <li><code>&lt;name&gt; &lt;?type&gt;, optonal: &lt;description&gt;</code> formatted   in Markdown style and added to named sections</li> <li><code>&lt;name&gt; -- &lt;description&gt;</code> formatted in Markdown style</li> </ul> <p>Handsdown API Index / Handsdown / Processors / PEP 257 Docstring Processor</p> <p>Auto-generated documentation for handsdown.processors.pep257 module.</p>"},{"location":"handsdown/processors/pep257/#pep257docstringprocessor","title":"PEP257DocstringProcessor","text":"<p>Show source in pep257.py:33</p> <p>Docstring processor for PEP 257 and Google docstring format.</p>"},{"location":"handsdown/processors/pep257/#signature","title":"Signature","text":"<pre><code>class PEP257DocstringProcessor(BaseDocstringProcessor):\n    ...\n</code></pre>"},{"location":"handsdown/processors/pep257/#see-also","title":"See also","text":"<ul> <li>BaseDocstringProcessor</li> </ul>"},{"location":"handsdown/processors/rst/","title":"reStructuredText Docstring Processor","text":"<p>Docstring processor for restructured text docstring format.</p> <p>Supported features:</p> <ul> <li><code>:param &lt;name&gt; &lt;?type&gt;: &lt;?description&gt;</code> directive is added to <code>Arguments</code> section</li> <li><code>:type: &lt;?description&gt;</code> directive transformed to <code>Type: &lt;type&gt;</code></li> <li><code>:returns &lt;?type&gt;: &lt;?description&gt;</code> directive is added to <code>Returns</code> section</li> <li><code>:rtype: &lt;?description&gt;</code> directive transformed to <code>Type: &lt;type&gt;</code></li> <li><code>:raises: &lt;?description&gt;</code> directive is added to <code>Raises</code> section</li> <li><code>.. seealso::</code> directive is added to <code>See also</code> section</li> <li><code>.. note::</code> directive is added to <code>Notes</code> section</li> <li><code>.. warning:: &lt;version&gt;</code> directive is added to <code>Warnings</code> section</li> <li><code>.. versionadded:: &lt;version&gt;</code> directive is formatted in Sphinx-style and added   to <code>Notes</code> section</li> <li><code>.. versionchanged:: &lt;version&gt;</code> directive is formatted in Sphinx-style and added   to <code>Notes</code> section</li> <li><code>.. deprecated::</code> directive is formatted in Sphinx-style and added to <code>Notes</code> section</li> <li><code>.. code-block::</code> directive is formatted as Markdown Python codeblock</li> <li><code>.. code-block:: &lt;language&gt;</code> directive is formatted as Markdown codeblock</li> <li><code>.. math::</code> directive is formatted as Markdown Python codeblock</li> <li><code>.. highlight::</code> directive is formatted as Markdown Python codeblock</li> <li><code>.. highlight:: &lt;language&gt;</code> directive is formatted as Markdown codeblock</li> </ul> <p>Handsdown API Index / Handsdown / Processors / reStructuredText Docstring Processor</p> <p>Auto-generated documentation for handsdown.processors.rst module.</p>"},{"location":"handsdown/processors/rst/#rstdocstringprocessor","title":"RSTDocstringProcessor","text":"<p>Show source in rst.py:33</p> <p>Docstring processor for restructured text docstring format.</p>"},{"location":"handsdown/processors/rst/#signature","title":"Signature","text":"<pre><code>class RSTDocstringProcessor(BaseDocstringProcessor):\n    ...\n</code></pre>"},{"location":"handsdown/processors/rst/#see-also","title":"See also","text":"<ul> <li>BaseDocstringProcessor</li> </ul>"},{"location":"handsdown/processors/section/","title":"Section","text":"<p>Section in a <code>SectionMap</code>.</p> <p>Handsdown API Index / Handsdown / Processors / Section</p> <p>Auto-generated documentation for handsdown.processors.section module.</p>"},{"location":"handsdown/processors/section/#section_1","title":"Section","text":"<p>Show source in section.py:9</p> <p>Section in a <code>SectionMap</code>.</p>"},{"location":"handsdown/processors/section/#arguments","title":"Arguments","text":"<ul> <li><code>title</code> - Section title.</li> <li><code>blocks</code> - List of line blocks.</li> </ul>"},{"location":"handsdown/processors/section/#signature","title":"Signature","text":"<pre><code>class Section:\n    def __init__(self, title: str, blocks: Iterable[SectionBlock]) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/processors/section/#see-also","title":"See also","text":"<ul> <li>SectionBlock</li> </ul>"},{"location":"handsdown/processors/section/#sectioniterate_blocks","title":"Section().iterate_blocks","text":"<p>Show source in section.py:35</p> <p>Iterate over all non-empty Section block lines.</p>"},{"location":"handsdown/processors/section/#returns","title":"Returns","text":"<p>Section block lines.</p>"},{"location":"handsdown/processors/section/#signature_1","title":"Signature","text":"<pre><code>def iterate_blocks(self) -&gt; Iterable[SectionBlock]:\n    ...\n</code></pre>"},{"location":"handsdown/processors/section/#see-also_1","title":"See also","text":"<ul> <li>SectionBlock</li> </ul>"},{"location":"handsdown/processors/section/#sectionrender","title":"Section().render","text":"<p>Show source in section.py:22</p> <p>Render all Section block lines.</p>"},{"location":"handsdown/processors/section/#returns_1","title":"Returns","text":"<p>Section lines as a text.</p>"},{"location":"handsdown/processors/section/#signature_2","title":"Signature","text":"<pre><code>def render(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/processors/section_block/","title":"SectionBlock","text":"<p><code>Section</code> block.</p> <p>Handsdown API Index / Handsdown / Processors / SectionBlock</p> <p>Auto-generated documentation for handsdown.processors.section_block module.</p>"},{"location":"handsdown/processors/section_block/#sectionblock_1","title":"SectionBlock","text":"<p>Show source in section_block.py:9</p> <p><code>Section</code> block.</p>"},{"location":"handsdown/processors/section_block/#arguments","title":"Arguments","text":"<ul> <li><code>lines</code> - List of lines.</li> </ul>"},{"location":"handsdown/processors/section_block/#signature","title":"Signature","text":"<pre><code>class SectionBlock:\n    def __init__(self, lines: Iterable[str]) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/processors/section_block/#sectionblockrender","title":"SectionBlock().render","text":"<p>Show source in section_block.py:20</p> <p>Render trimmed block lines.</p>"},{"location":"handsdown/processors/section_block/#returns","title":"Returns","text":"<p>Block lines as a text.</p>"},{"location":"handsdown/processors/section_block/#signature_1","title":"Signature","text":"<pre><code>def render(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/processors/section_map/","title":"SectionMap","text":"<p>Module for splitting docstring into <code>Section</code> groups.</p> <p>Handsdown API Index / Handsdown / Processors / SectionMap</p> <p>Auto-generated documentation for handsdown.processors.section_map module.</p>"},{"location":"handsdown/processors/section_map/#sectionmap_1","title":"SectionMap","text":"<p>Show source in section_map.py:11</p> <p>Dict-based storage for parsed <code>Section</code> list.</p> <p>Used for BaseDocstringProcessor.</p> <p>Key is a <code>Section</code> title. Value is a related <code>Section</code> instance.</p>"},{"location":"handsdown/processors/section_map/#signature","title":"Signature","text":"<pre><code>class SectionMap:\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/processors/section_map/#sectionmapiter","title":"SectionMap().iter","text":"<p>Show source in section_map.py:95</p> <p>Iterate over existing <code>Section</code> objects.</p>"},{"location":"handsdown/processors/section_map/#yields","title":"Yields","text":"<p><code>Section</code> objects in order of appearance.</p>"},{"location":"handsdown/processors/section_map/#signature_1","title":"Signature","text":"<pre><code>def __iter__(self) -&gt; Iterator[Section]:\n    ...\n</code></pre>"},{"location":"handsdown/processors/section_map/#see-also","title":"See also","text":"<ul> <li>Section</li> </ul>"},{"location":"handsdown/processors/section_map/#sectionmapadd_block","title":"SectionMap().add_block","text":"<p>Show source in section_map.py:65</p> <p>Add new <code>SectionBlock</code> to section <code>section_name</code>.</p> <p>If <code>Section</code> does not exist - it is not created.</p>"},{"location":"handsdown/processors/section_map/#arguments","title":"Arguments","text":"<ul> <li><code>section_name</code> - Target section title</li> </ul>"},{"location":"handsdown/processors/section_map/#signature_2","title":"Signature","text":"<pre><code>def add_block(self, section_name: str) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/processors/section_map/#sectionmapadd_line","title":"SectionMap().add_line","text":"<p>Show source in section_map.py:42</p> <p>Add new <code>line</code> to the last <code>SectionBlock</code> of section <code>section_name</code>.</p> <p>If line and section are empty - section is not created.</p>"},{"location":"handsdown/processors/section_map/#arguments_1","title":"Arguments","text":"<ul> <li><code>section_name</code> - Target section title</li> <li><code>line</code> - Line to add</li> </ul>"},{"location":"handsdown/processors/section_map/#signature_3","title":"Signature","text":"<pre><code>def add_line(self, section_name: str, line: str) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/processors/section_map/#sectionmapadd_line_indent","title":"SectionMap().add_line_indent","text":"<p>Show source in section_map.py:26</p> <p>Add line respecting indent of the current section block.</p>"},{"location":"handsdown/processors/section_map/#arguments_2","title":"Arguments","text":"<ul> <li><code>section_name</code> - Target section title</li> <li><code>line</code> - Line to add</li> </ul>"},{"location":"handsdown/processors/section_map/#signature_4","title":"Signature","text":"<pre><code>def add_line_indent(self, section_name: str, line: str) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/processors/section_map/#sectionmaptrim_block","title":"SectionMap().trim_block","text":"<p>Show source in section_map.py:79</p> <p>Delete last empty lines from the last <code>SectionBlock</code>.</p> <p>If <code>Section</code> does not exist - it is not created.</p>"},{"location":"handsdown/processors/section_map/#arguments_3","title":"Arguments","text":"<ul> <li><code>section_name</code> - Target section title.</li> </ul>"},{"location":"handsdown/processors/section_map/#signature_5","title":"Signature","text":"<pre><code>def trim_block(self, section_name: str) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/processors/smart/","title":"Smart","text":"<p>Smart Docstring Processor.</p> <p>Docstring processor that selects a <code>DocstringProcessor</code> based on a docstring content:</p> <ul> <li><code>handsdown.processors.pep257.PEP257DocstringProcessor</code></li> <li><code>handsdown.processors.rst.RSTDocstringProcessor</code></li> </ul> <p>Handsdown API Index / Handsdown / Processors / Smart</p> <p>Auto-generated documentation for handsdown.processors.smart module.</p>"},{"location":"handsdown/processors/smart/#smartdocstringprocessor","title":"SmartDocstringProcessor","text":"<p>Show source in smart.py:15</p> <p>Docstring processor that selects a <code>DocstringProcessor</code> based on a docstring content.</p>"},{"location":"handsdown/processors/smart/#signature","title":"Signature","text":"<pre><code>class SmartDocstringProcessor(BaseDocstringProcessor):\n    def __init__(self) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/processors/smart/#see-also","title":"See also","text":"<ul> <li>BaseDocstringProcessor</li> </ul>"},{"location":"handsdown/processors/smart/#smartdocstringprocessorbuild_sections","title":"SmartDocstringProcessor().build_sections","text":"<p>Show source in smart.py:28</p> <p>Parse docstring and split it to sections with arrays of strings.</p>"},{"location":"handsdown/processors/smart/#arguments","title":"Arguments","text":"<ul> <li><code>content</code> - Object docstring.</li> </ul>"},{"location":"handsdown/processors/smart/#returns","title":"Returns","text":"<p>A dictionary where key is a section name and value is a list of string sof this section.</p>"},{"location":"handsdown/processors/smart/#signature_1","title":"Signature","text":"<pre><code>def build_sections(self, content: str) -&gt; SectionMap:\n    ...\n</code></pre>"},{"location":"handsdown/processors/smart/#see-also_1","title":"See also","text":"<ul> <li>SectionMap</li> </ul>"},{"location":"handsdown/utils/","title":"Utils","text":"<p>Handful utils.</p> <p>Handsdown API Index / Handsdown / Utils</p> <p>Auto-generated documentation for handsdown.utils module.</p>"},{"location":"handsdown/utils/#modules","title":"Modules","text":"<ul> <li>Blackify</li> <li>DocstringFormatter</li> <li>ImportString</li> <li>IndentTrimmer</li> <li>Logger</li> <li>Markdown</li> <li>Path</li> <li>PathFinder</li> <li>Strings</li> </ul>"},{"location":"handsdown/utils/blackify/","title":"Blackify","text":"<p>Handsdown API Index / Handsdown / Utils / Blackify</p> <p>Auto-generated documentation for handsdown.utils.blackify module.</p>"},{"location":"handsdown/utils/blackify/#blackify_1","title":"blackify","text":"<p>Show source in blackify.py:10</p> <p>Format <code>content</code> with <code>black</code>.</p>"},{"location":"handsdown/utils/blackify/#arguments","title":"Arguments","text":"<ul> <li><code>content</code> - Python code to format.</li> </ul>"},{"location":"handsdown/utils/blackify/#returns","title":"Returns","text":"<p>Formatted python code.</p>"},{"location":"handsdown/utils/blackify/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> - If <code>content</code> is not a valid Python code.</li> </ul>"},{"location":"handsdown/utils/blackify/#signature","title":"Signature","text":"<pre><code>def blackify(content: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/docstring_formatter/","title":"DocstringFormatter","text":"<p>Translator of docstrings to Markdown format.</p> <p>Handsdown API Index / Handsdown / Utils / DocstringFormatter</p> <p>Auto-generated documentation for handsdown.utils.docstring_formatter module.</p>"},{"location":"handsdown/utils/docstring_formatter/#docstringformatter_1","title":"DocstringFormatter","text":"<p>Show source in docstring_formatter.py:9</p> <p>Translator of docstrings to Markdown format.</p>"},{"location":"handsdown/utils/docstring_formatter/#arguments","title":"Arguments","text":"<ul> <li><code>docstring</code> - Raw docstring.</li> </ul>"},{"location":"handsdown/utils/docstring_formatter/#signature","title":"Signature","text":"<pre><code>class DocstringFormatter:\n    def __init__(self, docstring: str) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/utils/docstring_formatter/#docstringformatter_cleanup","title":"DocstringFormatter._cleanup","text":"<p>Show source in docstring_formatter.py:24</p> <p>Fix multiline docstrings starting with no newline after quotes.</p>"},{"location":"handsdown/utils/docstring_formatter/#arguments_1","title":"Arguments","text":"<ul> <li><code>docstring</code> - Raw docstring.</li> </ul>"},{"location":"handsdown/utils/docstring_formatter/#returns","title":"Returns","text":"<p>Aligned docstring.</p>"},{"location":"handsdown/utils/docstring_formatter/#signature_1","title":"Signature","text":"<pre><code>@staticmethod\ndef _cleanup(docstring: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/docstring_formatter/#docstringformatterrender","title":"DocstringFormatter().render","text":"<p>Show source in docstring_formatter.py:57</p> <p>Get Markdown-friendly docstring.</p>"},{"location":"handsdown/utils/docstring_formatter/#returns_1","title":"Returns","text":"<p>A cleaned up docstring.</p>"},{"location":"handsdown/utils/docstring_formatter/#signature_2","title":"Signature","text":"<pre><code>def render(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/","title":"ImportString","text":"<p>Wrapper for python import strings.</p> <p>Handsdown API Index / Handsdown / Utils / ImportString</p> <p>Auto-generated documentation for handsdown.utils.import_string module.</p>"},{"location":"handsdown/utils/import_string/#importstring_1","title":"ImportString","text":"<p>Show source in import_string.py:11</p> <p>Wrapper for python import strings.</p>"},{"location":"handsdown/utils/import_string/#arguments","title":"Arguments","text":"<ul> <li><code>value</code> - Import string.</li> </ul>"},{"location":"handsdown/utils/import_string/#signature","title":"Signature","text":"<pre><code>class ImportString:\n    def __init__(self, value: str) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringadd","title":"ImportString().add","text":"<p>Show source in import_string.py:39</p> <p>Add new import part.</p>"},{"location":"handsdown/utils/import_string/#examples","title":"Examples","text":"<pre><code>ImportString(\"my_module\") + \"MyClass\"\nImportString(\"my_module.MyClass\")\n\nImportString(\"\") + \"MyClass\"\nImportString(\"MyClass\")\n</code></pre>"},{"location":"handsdown/utils/import_string/#arguments_1","title":"Arguments","text":"<ul> <li><code>other</code> - Import string part.</li> </ul>"},{"location":"handsdown/utils/import_string/#returns","title":"Returns","text":"<p>A new ImportString instance.</p>"},{"location":"handsdown/utils/import_string/#signature_1","title":"Signature","text":"<pre><code>def __add__(self, other: str) -&gt; \"ImportString\":\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringbool","title":"ImportString().bool","text":"<p>Show source in import_string.py:62</p> <p>Check if not empty.</p>"},{"location":"handsdown/utils/import_string/#examples_1","title":"Examples","text":"<pre><code>bool(ImportString(\"my_module\"))\nTrue\n\nbool(ImportString(\"\"))\nFalse\n</code></pre>"},{"location":"handsdown/utils/import_string/#returns_1","title":"Returns","text":"<p>True if not empty.</p>"},{"location":"handsdown/utils/import_string/#signature_2","title":"Signature","text":"<pre><code>def __bool__(self) -&gt; bool:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringeq","title":"ImportString().eq","text":"<p>Show source in import_string.py:79</p> <p>Compare to another ImportString or a string.</p>"},{"location":"handsdown/utils/import_string/#examples_2","title":"Examples","text":"<pre><code>ImportString(\"my_module.MyClass\") == ImportString(\"my_module.MyClass\")\nTrue\n\nImportString(\"my_module.MyClass\") == ImportString(\"my_module.OtherClass\")\nFalse\n\nImportString(\"my_module.MyClass\") == \"my_module.MyClass\"\nTrue\n\nImportString(\"my_module.MyClass\") == \"my_module\"\nFalse\n\nImportString(\"my_module.MyClass\") == b\"my_module.MyClass\"\nFalse\n</code></pre>"},{"location":"handsdown/utils/import_string/#arguments_2","title":"Arguments","text":"<p>other - ImportString instance or a string.</p>"},{"location":"handsdown/utils/import_string/#returns_2","title":"Returns","text":"<p>True if import strings are equal.</p>"},{"location":"handsdown/utils/import_string/#signature_3","title":"Signature","text":"<pre><code>def __eq__(self, other: Any) -&gt; bool:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringstr","title":"ImportString().str","text":"<p>Show source in import_string.py:22</p> <p>Get string value.</p>"},{"location":"handsdown/utils/import_string/#examples_3","title":"Examples","text":"<pre><code>str(ImportString(\"my_module\"))\n\"my_module\"\n</code></pre>"},{"location":"handsdown/utils/import_string/#returns_3","title":"Returns","text":"<p>Original import string.</p>"},{"location":"handsdown/utils/import_string/#signature_4","title":"Signature","text":"<pre><code>def __str__(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringget_parents","title":"ImportString().get_parents","text":"<p>Show source in import_string.py:164</p> <p>Get all parents.</p>"},{"location":"handsdown/utils/import_string/#returns_4","title":"Returns","text":"<p>A list of ImportString instances.</p>"},{"location":"handsdown/utils/import_string/#signature_5","title":"Signature","text":"<pre><code>def get_parents(self: _R) -&gt; List[_R]:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringis_top_level","title":"ImportString().is_top_level","text":"<p>Show source in import_string.py:132</p> <p>Check if import string has no parents.</p>"},{"location":"handsdown/utils/import_string/#returns_5","title":"Returns","text":"<p>True if it has no parents.</p>"},{"location":"handsdown/utils/import_string/#signature_6","title":"Signature","text":"<pre><code>def is_top_level(self) -&gt; bool:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringlength","title":"ImportString().length","text":"<p>Show source in import_string.py:183</p> <p>Length of import string parts.</p>"},{"location":"handsdown/utils/import_string/#returns_6","title":"Returns","text":"<p>Length of import string.</p>"},{"location":"handsdown/utils/import_string/#signature_7","title":"Signature","text":"<pre><code>@property\ndef length(self) -&gt; int:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringname","title":"ImportString().name","text":"<p>Show source in import_string.py:193</p> <p>Last part of the import string.</p>"},{"location":"handsdown/utils/import_string/#signature_8","title":"Signature","text":"<pre><code>@property\ndef name(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringparent","title":"ImportString().parent","text":"<p>Show source in import_string.py:141</p> <p>Parent import string.</p>"},{"location":"handsdown/utils/import_string/#returns_7","title":"Returns","text":"<p>A new ImportString instance.</p>"},{"location":"handsdown/utils/import_string/#signature_9","title":"Signature","text":"<pre><code>@property\ndef parent(self: _R) -&gt; _R:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringparts","title":"ImportString().parts","text":"<p>Show source in import_string.py:114</p> <p>Parts of import string splitted by dots.</p>"},{"location":"handsdown/utils/import_string/#examples_4","title":"Examples","text":"<pre><code>ImportString(\"my_module.MyClass\")\n[\"my_module\", \"MyClass\"]\n\nImportString(\"\")\n[]\n</code></pre>"},{"location":"handsdown/utils/import_string/#returns_8","title":"Returns","text":"<p>A list of import string parts.</p>"},{"location":"handsdown/utils/import_string/#signature_10","title":"Signature","text":"<pre><code>@property\ndef parts(self) -&gt; List[str]:\n    ...\n</code></pre>"},{"location":"handsdown/utils/import_string/#importstringstartswith","title":"ImportString().startswith","text":"<p>Show source in import_string.py:155</p> <p>Check if it starts with <code>import_string</code>.</p>"},{"location":"handsdown/utils/import_string/#returns_9","title":"Returns","text":"<p>True if it is a child.</p>"},{"location":"handsdown/utils/import_string/#signature_11","title":"Signature","text":"<pre><code>def startswith(self: _R, import_string: _R) -&gt; bool:\n    ...\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/","title":"IndentTrimmer","text":"<p>Utility for removing indentation for sections and lines.</p> <p>Handsdown API Index / Handsdown / Utils / IndentTrimmer</p> <p>Auto-generated documentation for handsdown.utils.indent_trimmer module.</p>"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmer_1","title":"IndentTrimmer","text":"<p>Show source in indent_trimmer.py:10</p> <p>Utility for removing indentation for sections and lines.</p>"},{"location":"handsdown/utils/indent_trimmer/#signature","title":"Signature","text":"<pre><code>class IndentTrimmer:\n    ...\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmerget_line_indent","title":"IndentTrimmer.get_line_indent","text":"<p>Show source in indent_trimmer.py:119</p> <p>Get indent length of the line.</p>"},{"location":"handsdown/utils/indent_trimmer/#examples","title":"Examples","text":"<pre><code>IndentTrimmer.get_line_indent('   test')\n3\n\nIndentTrimmer.get_line_indent('test')\n0\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#arguments","title":"Arguments","text":"<ul> <li><code>line</code> - Line of text.</li> </ul>"},{"location":"handsdown/utils/indent_trimmer/#returns","title":"Returns","text":"<p>A number of indentation characters in a beginning of the line.</p>"},{"location":"handsdown/utils/indent_trimmer/#signature_1","title":"Signature","text":"<pre><code>@staticmethod\ndef get_line_indent(line: str) -&gt; int:\n    ...\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmerindent_line","title":"IndentTrimmer.indent_line","text":"<p>Show source in indent_trimmer.py:140</p> <p>Indent line with givent length <code>indent</code>.</p>"},{"location":"handsdown/utils/indent_trimmer/#examples_1","title":"Examples","text":"<pre><code>IndentTrimmer.indent_line('test', 2)\n'  test'\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#arguments_1","title":"Arguments","text":"<ul> <li><code>line</code> - Line to indent.</li> <li><code>indent</code> - Length of indent in spaces.</li> </ul>"},{"location":"handsdown/utils/indent_trimmer/#returns_1","title":"Returns","text":"<p>An indented line.</p>"},{"location":"handsdown/utils/indent_trimmer/#signature_2","title":"Signature","text":"<pre><code>@staticmethod\ndef indent_line(line: str, indent: int) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmertrim_empty_lines","title":"IndentTrimmer.trim_empty_lines","text":"<p>Show source in indent_trimmer.py:15</p> <p>Trim empty lines in the begging and the end of the text.</p>"},{"location":"handsdown/utils/indent_trimmer/#examples_2","title":"Examples","text":"<pre><code>text = '\\n  \\n test\\ntest2\\n \\n '\nIndentTrimmer.trim_empty_lines(text)\n' test\\ntest2'\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#returns_2","title":"Returns","text":"<p>A stripped string.</p>"},{"location":"handsdown/utils/indent_trimmer/#signature_3","title":"Signature","text":"<pre><code>@staticmethod\ndef trim_empty_lines(text: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmertrim_line","title":"IndentTrimmer.trim_line","text":"<p>Show source in indent_trimmer.py:92</p> <p>Trim indent from line if it is empty.</p>"},{"location":"handsdown/utils/indent_trimmer/#examples_3","title":"Examples","text":"<pre><code>IndentTrimmer.trim_line('     test', 2)\n'   test'\n\nIndentTrimmer.trim_line('     test', 6)\n'test'\n\nIndentTrimmer.trim_line('     test', 1)\n'    test'\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#arguments_2","title":"Arguments","text":"<ul> <li><code>line</code> - A line of text.</li> </ul>"},{"location":"handsdown/utils/indent_trimmer/#returns_3","title":"Returns","text":"<p>A line with removed indent.</p>"},{"location":"handsdown/utils/indent_trimmer/#signature_4","title":"Signature","text":"<pre><code>@staticmethod\ndef trim_line(line: str, indent: int) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmertrim_lines","title":"IndentTrimmer.trim_lines","text":"<p>Show source in indent_trimmer.py:57</p> <p>Trim minimum indent from each line of text.</p>"},{"location":"handsdown/utils/indent_trimmer/#examples_4","title":"Examples","text":"<pre><code>IndentTrimmer.trim_lines([\n    '  asd',\n    ' asd',\n    '   asd',\n])\n[\n    ' asd',\n    'asd',\n    '  asd',\n]\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#arguments_3","title":"Arguments","text":"<ul> <li><code>lines</code> - List of lines.</li> </ul>"},{"location":"handsdown/utils/indent_trimmer/#returns_4","title":"Returns","text":"<p>A list of lines with trimmed indent.</p>"},{"location":"handsdown/utils/indent_trimmer/#signature_5","title":"Signature","text":"<pre><code>@classmethod\ndef trim_lines(cls, lines: Iterable[str]) -&gt; List[str]:\n    ...\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmertrim_text","title":"IndentTrimmer.trim_text","text":"<p>Show source in indent_trimmer.py:37</p> <p>Trim minimum indent from each line of text.</p>"},{"location":"handsdown/utils/indent_trimmer/#examples_5","title":"Examples","text":"<pre><code>IndentTrimmer.trim_text('  asd\\n asd\\n   asd\\n')\n' asd\\nasd\\n  asd\\n'\n</code></pre>"},{"location":"handsdown/utils/indent_trimmer/#arguments_4","title":"Arguments","text":"<ul> <li><code>text</code> - Multiline text.</li> </ul>"},{"location":"handsdown/utils/indent_trimmer/#returns_5","title":"Returns","text":"<p>A text with trimmed indent.</p>"},{"location":"handsdown/utils/indent_trimmer/#signature_6","title":"Signature","text":"<pre><code>@classmethod\ndef trim_text(cls, text: str) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/logger/","title":"Logger","text":"<p>Utilities for stdout stream logger.</p> <p>Handsdown API Index / Handsdown / Utils / Logger</p> <p>Auto-generated documentation for handsdown.utils.logger module.</p>"},{"location":"handsdown/utils/logger/#get_logger","title":"get_logger","text":"<p>Show source in logger.py:10</p> <p>Get stdout stream logger.</p>"},{"location":"handsdown/utils/logger/#arguments","title":"Arguments","text":"<ul> <li><code>level</code> - Desired logging level.</li> </ul>"},{"location":"handsdown/utils/logger/#returns","title":"Returns","text":"<p>A <code>logging.Logger</code> instance.</p>"},{"location":"handsdown/utils/logger/#signature","title":"Signature","text":"<pre><code>def get_logger(level: Optional[int] = None) -&gt; logging.Logger:\n    ...\n</code></pre>"},{"location":"handsdown/utils/markdown/","title":"Markdown","text":"<p>Utils for markdown rendering.</p> <p>Handsdown API Index / Handsdown / Utils / Markdown</p> <p>Auto-generated documentation for handsdown.utils.markdown module.</p>"},{"location":"handsdown/utils/markdown/#header","title":"Header","text":"<p>Show source in markdown.py:9</p> <p>Markdown header.</p>"},{"location":"handsdown/utils/markdown/#arguments","title":"Arguments","text":"<ul> <li><code>title</code> - Header title</li> <li><code>level</code> - Header level, 1-6</li> <li><code>anchor</code> - Anchor link</li> </ul>"},{"location":"handsdown/utils/markdown/#signature","title":"Signature","text":"<pre><code>class Header:\n    def __init__(self, title: str, level: int, anchor: str) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/utils/markdown/#headerrender","title":"Header().render","text":"<p>Show source in markdown.py:24</p> <p>Render menu item to string.</p>"},{"location":"handsdown/utils/markdown/#signature_1","title":"Signature","text":"<pre><code>def render(self) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/markdown/#tableofcontents","title":"TableOfContents","text":"<p>Show source in markdown.py:32</p> <p>MarkDown Table of Contents.</p>"},{"location":"handsdown/utils/markdown/#arguments_1","title":"Arguments","text":"<ul> <li><code>headers</code> - List of headers</li> </ul>"},{"location":"handsdown/utils/markdown/#signature_2","title":"Signature","text":"<pre><code>class TableOfContents:\n    def __init__(self, headers: Iterable[Header]) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/utils/markdown/#see-also","title":"See also","text":"<ul> <li>Header</li> </ul>"},{"location":"handsdown/utils/markdown/#tableofcontentsparse","title":"TableOfContents.parse","text":"<p>Show source in markdown.py:43</p> <p>Parse table of Contents for MarkDown text.</p>"},{"location":"handsdown/utils/markdown/#arguments_2","title":"Arguments","text":"<ul> <li><code>text</code> - MarkDown text.</li> </ul>"},{"location":"handsdown/utils/markdown/#signature_3","title":"Signature","text":"<pre><code>@classmethod\ndef parse(cls: Type[_R], text: str) -&gt; _R:\n    ...\n</code></pre>"},{"location":"handsdown/utils/markdown/#tableofcontentsrender","title":"TableOfContents().render","text":"<p>Show source in markdown.py:71</p> <p>Render ToC to string.</p>"},{"location":"handsdown/utils/markdown/#signature_4","title":"Signature","text":"<pre><code>def render(self, max_level: int = 3) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/markdown/#insert_md_toc","title":"insert_md_toc","text":"<p>Show source in markdown.py:87</p> <p>Insert Table of Contents before the first second-level header.</p>"},{"location":"handsdown/utils/markdown/#signature_5","title":"Signature","text":"<pre><code>def insert_md_toc(text: str, depth: int = 3) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/path/","title":"Path","text":"<p>Path utils.</p> <p>Handsdown API Index / Handsdown / Utils / Path</p> <p>Auto-generated documentation for handsdown.utils.path module.</p>"},{"location":"handsdown/utils/path/#print_path","title":"print_path","text":"<p>Show source in path.py:7</p> <p>Print path relative to workdir.</p>"},{"location":"handsdown/utils/path/#signature","title":"Signature","text":"<pre><code>def print_path(path: Path) -&gt; str:\n    ...\n</code></pre>"},{"location":"handsdown/utils/path_finder/","title":"PathFinder","text":"<p>Glob helper for matching paths inside <code>root</code> path.</p> <p>Supports <code>.gitignore</code>-like <code>include</code> and <code>exclude</code> patterns.</p> <p>Handsdown API Index / Handsdown / Utils / PathFinder</p> <p>Auto-generated documentation for handsdown.utils.path_finder module.</p>"},{"location":"handsdown/utils/path_finder/#pathfinder_1","title":"PathFinder","text":"<p>Show source in path_finder.py:18</p> <p>Glob helper for matching paths inside <code>root</code> path.</p> <p>With <code>.gitignore</code>-like <code>include</code> and <code>exclude</code> patterns.</p>"},{"location":"handsdown/utils/path_finder/#examples","title":"Examples","text":"<pre><code>path_finder = PathFinder(Path.cwd())\nlist(path_finder.glob('*.txt'))\n['my_new.txt', 'my.txt', 'new.txt']\n\nlist(path_finder.include('my*').glob('*.txt'))\n['my_new.txt', 'my.txt']\n\nlist(path_finder.exclude('*new*').glob('*.txt'))\n['my.txt']\n</code></pre>"},{"location":"handsdown/utils/path_finder/#arguments","title":"Arguments","text":"<ul> <li><code>root</code> - Path to root folder.</li> <li><code>glob_expr</code> - <code>glob</code> expression to lookup in <code>root</code></li> </ul>"},{"location":"handsdown/utils/path_finder/#raises","title":"Raises","text":"<ul> <li><code>PathFinderError</code> - If <code>root</code> is not absolute or not a directory.</li> </ul>"},{"location":"handsdown/utils/path_finder/#signature","title":"Signature","text":"<pre><code>class PathFinder:\n    def __init__(self, root: Path) -&gt; None:\n        ...\n</code></pre>"},{"location":"handsdown/utils/path_finder/#pathfinderexclude","title":"PathFinder().exclude","text":"<p>Show source in path_finder.py:85</p> <p>Add <code>fnmatch</code> expression to black list.</p> <p>If black list is empty - no black list filtration applied. If expression does not have <code>*</code> or <code>.</code> characters, appends <code>/*</code> to it.</p>"},{"location":"handsdown/utils/path_finder/#arguments_1","title":"Arguments","text":"<ul> <li><code>fn_exrps</code> - One or more <code>fnmatch</code> expressions.</li> </ul>"},{"location":"handsdown/utils/path_finder/#returns","title":"Returns","text":"<p>A copy of itself.</p>"},{"location":"handsdown/utils/path_finder/#signature_1","title":"Signature","text":"<pre><code>def exclude(self: _R, *fn_exrps: str) -&gt; _R:\n    ...\n</code></pre>"},{"location":"handsdown/utils/path_finder/#pathfinderglob","title":"PathFinder().glob","text":"<p>Show source in path_finder.py:128</p> <p>Find all matching <code>Path</code> objects respecting PathFinder().include and PathFinder().exclude patterns.</p>"},{"location":"handsdown/utils/path_finder/#yields","title":"Yields","text":"<p>Matching <code>Path</code> objects.</p>"},{"location":"handsdown/utils/path_finder/#signature_2","title":"Signature","text":"<pre><code>def glob(self, glob_expr: str) -&gt; Iterator[Path]:\n    ...\n</code></pre>"},{"location":"handsdown/utils/path_finder/#pathfinderinclude","title":"PathFinder().include","text":"<p>Show source in path_finder.py:64</p> <p>Add <code>fnmatch</code> expression to white list.</p> <p>If white list is empty - no white list filtration applied. If expression does not have <code>*</code> or <code>.</code> characters, appends <code>/*</code> to it.</p>"},{"location":"handsdown/utils/path_finder/#arguments_2","title":"Arguments","text":"<ul> <li><code>fn_exrps</code> - One or more <code>fnmatch</code> expressions.</li> </ul>"},{"location":"handsdown/utils/path_finder/#returns_1","title":"Returns","text":"<p>A copy of itself.</p>"},{"location":"handsdown/utils/path_finder/#signature_3","title":"Signature","text":"<pre><code>def include(self: _R, *fn_exrps: str) -&gt; _R:\n    ...\n</code></pre>"},{"location":"handsdown/utils/path_finder/#pathfindermkdir","title":"PathFinder().mkdir","text":"<p>Show source in path_finder.py:173</p> <p>Create directories up to <code>root</code> if they do not exist.</p>"},{"location":"handsdown/utils/path_finder/#arguments_3","title":"Arguments","text":"<ul> <li><code>force</code> - Delete existing parent if it is not a directory.</li> </ul>"},{"location":"handsdown/utils/path_finder/#raises_1","title":"Raises","text":"<ul> <li><code>PathFinderError</code> - If any existing parent is not a directory and not in <code>force</code> mode.</li> </ul>"},{"location":"handsdown/utils/path_finder/#signature_4","title":"Signature","text":"<pre><code>def mkdir(self, force: bool = False) -&gt; None:\n    ...\n</code></pre>"},{"location":"handsdown/utils/path_finder/#pathfinderrelative","title":"PathFinder().relative","text":"<p>Show source in path_finder.py:144</p> <p>Find a relative path from <code>root</code> to <code>target</code>.</p> <p><code>target</code> should be an absolute path.</p>"},{"location":"handsdown/utils/path_finder/#arguments_4","title":"Arguments","text":"<ul> <li><code>target</code> - Target path.</li> </ul>"},{"location":"handsdown/utils/path_finder/#returns_2","title":"Returns","text":"<p>A relative path to <code>target</code>.</p>"},{"location":"handsdown/utils/path_finder/#signature_5","title":"Signature","text":"<pre><code>def relative(self, target: Path) -&gt; Path:\n    ...\n</code></pre>"},{"location":"handsdown/utils/strings/","title":"Strings","text":"<p>Utils for strings.</p> <p>Handsdown API Index / Handsdown / Utils / Strings</p> <p>Auto-generated documentation for handsdown.utils.strings module.</p>"},{"location":"handsdown/utils/strings/#extract_md_title","title":"extract_md_title","text":"<p>Show source in strings.py:48</p> <p>Extract title from the first line of content.</p> <p>If title is present - return a title and a remnaing content. if not - return an empty title and untouched content.</p>"},{"location":"handsdown/utils/strings/#examples","title":"Examples","text":"<pre><code>extract_md_title('# Title\\ncontent')\n('Title', 'content')\n\nextract_md_title('no title\\ncontent')\n('', 'no title\\ncontent')\n</code></pre>"},{"location":"handsdown/utils/strings/#returns","title":"Returns","text":"<p>A tuple fo title and remaining content.</p>"},{"location":"handsdown/utils/strings/#signature","title":"Signature","text":"<pre><code>def extract_md_title(content: str) -&gt; Tuple[str, str]:\n    ...\n</code></pre>"},{"location":"handsdown/utils/strings/#make_title","title":"make_title","text":"<p>Show source in strings.py:7</p> <p>Convert <code>pathlib.Path</code> part or any other string to a human-readable title.</p> <p>Replace underscores with spaces and capitalize result.</p>"},{"location":"handsdown/utils/strings/#examples_1","title":"Examples","text":"<pre><code>make_title(Path(\"my_module/my_path.py\").stem)\n\"My Path\"\n\nmake_title(\"my_title\")\n\"My Title\"\n\nmake_title(\"__init__.py\")\n\"Init Py\"\n\nmake_title(Path(\"my_module/__main__.py\").stem)\n\"Module\"\n</code></pre>"},{"location":"handsdown/utils/strings/#arguments","title":"Arguments","text":"<ul> <li><code>file_stem</code> - Stem from path.</li> </ul>"},{"location":"handsdown/utils/strings/#returns_1","title":"Returns","text":"<p>A human-readable title as a string.</p>"},{"location":"handsdown/utils/strings/#signature_1","title":"Signature","text":"<pre><code>def make_title(file_stem: str) -&gt; str:\n    ...\n</code></pre>"}]}